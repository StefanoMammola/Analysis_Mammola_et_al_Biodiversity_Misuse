Method +
Title_geo +
Title_hab +
Title_taxon,
data = db_glm, family = "binomial")
parameters(m1)
performance::check_overdispersion(m1) #overdispersed
performance::check_collinearity(m1)
#Refit with quasibinomial due to overdispersion
m1  <- glm(cbind(prop,total) ~
year +
citation_residuals +
Domain +
Geography +
Method +
Title_geo +
Title_hab +
Title_taxon,
data = db_glm, family = "quasibinomial")
parameters(m1)
performance::check_collinearity(m1)
performance::check_model(m1)
# posthoc
pairs(emmeans::emmeans(m1, ~ Domain), simple=c("Domain","Geography"))
# posthoc
pairs(emmeans::emmeans(m1, ~ Domain), simple=c("Domain","Geography","Method"))
# posthoc
pairs(emmeans::emmeans(m1, ~ Domain), simple=c("Domain",))
# posthoc
pairs(emmeans::emmeans(m1, ~ Domain), simple=c("Domain"))
pairs(emmeans::emmeans(m1, ~ Geography), simple="Geography")
pairs(emmeans::emmeans(m1, ~ Method), simple="Method")
db_glm2 <- db_glm[db_glm$Title_taxon == 0,]
db_glm2 <- db_glm2[db_glm2$Title_habitat == 0,]
db_glm2 <- db_glm[db_glm$Title_taxon == 0,]
db_glm2 <- db_glm2[db_glm2$Title_hab == 0,]
db_glm2$Geography
db_glm2 <- db_glm2[db_glm2$Geography != "Antarctic",]
db_glm2 <- drop.levels(db_glm2)
db_glm2 <- droplevels(db_glm2)
#Balance of factors
table(db_glm2$Method)
table(db_glm2$Geography) #Antartica a bit unbalanced
table(db_glm2$Domain) #OK
#Initial model
m2  <- glm(cbind(prop,total) ~
year +
citation_residuals +
Domain +
Geography +
Method,
data = db_glm2, family = "binomial")
performance::check_overdispersion(m2) #overdispersed
#Refit with quasibinomial due to overdispersion
m2b  <- glm(cbind(prop,total) ~
year +
citation_residuals +
Domain +
Geography +
Method,
data = db_glm, family = "quasibinomial")
parameters(m2b)
performance::check_collinearity(m2b)
# posthoc
pairs(emmeans::emmeans(m2b, ~ Domain), simple=c("Domain"))
pairs(emmeans::emmeans(m2b, ~ Geography), simple="Geography")
pairs(emmeans::emmeans(m2b, ~ Method), simple="Method")
# Estract estimates
Estimates_m2 <-
m2b %>%
summary %>%
magrittr::extract2("coefficients") %>% # extract estimates
as.data.frame %>% rownames_to_column("Variable") %>%
dplyr::filter(!row_number() %in% 1) %>%  #remove intercept
dplyr::rename(SE = 3, z = 4, p = 5) #rename
#Set variable order and rename
order_var <- c("Year of publication",
"Citations (corrected by year)",
"Domain [Terrestrial]",
"Domain [Saltwater]",
"Domain [Freshwater]",
"Geographic [Palearctic]",
"Geographic [Afrotropical]",
"Geographic [Indomalayan]",
"Geographic [Neartic]",
"Geographic [Australasian]",
"Geographic [Neotropical]",
"Method [Review/Opinion]",
"Method [Field sampling]",
"Method [Big data]",
"Method [Other]")
Estimates_m1$Variable <- order_var #Rename
Estimates_m2$Variable <- order_var #Rename
#Set variable order and rename
order_var <- c("Year of publication",
"Citations (corrected by year)",
"Domain [Terrestrial]",
"Domain [Saltwater]",
"Domain [Freshwater]",
"Geographic [Palearctic]",
"Geographic [Afrotropical]",
"Geographic [Indomalayan]",
"Geographic [Neartic]",
"Geographic [Australasian]",
"Geographic [Neotropical]",
"Method [Review/Opinion]",
"Method [Field sampling]",
"Method [Big data]",
"Method [Other]")
Estimates_m2$Variable
Estimates_m2$Variable
db_glm2 <- db_glm[db_glm$Title_taxon == 0,]
db_glm2 <- db_glm2[db_glm2$Title_hab == 0,]
db_glm2 <- db_glm2[db_glm2$Geography != "Antarctic",] ; db_glm2 <- droplevels(db_glm2)
levels(db_glm2$Geography)
#Balance of factors
table(db_glm2$Method)
table(db_glm2$Geography)
table(db_glm2$Domain)
#Refit with quasibinomial due to overdispersion
m2b  <- glm(cbind(prop,total) ~
year +
citation_residuals +
Domain +
Geography +
Method,
data = db_glm, family = "quasibinomial")
parameters(m2b)
performance::check_collinearity(m2b)
# Estract estimates
Estimates_m2 <-
m2b %>%
summary %>%
magrittr::extract2("coefficients") %>% # extract estimates
as.data.frame %>% rownames_to_column("Variable") %>%
dplyr::filter(!row_number() %in% 1) %>%  #remove intercept
dplyr::rename(SE = 3, z = 4, p = 5) #rename
#Set variable order and rename
order_var <- c("Year of publication",
"Citations (corrected by year)",
"Domain [Terrestrial]",
"Domain [Saltwater]",
"Domain [Freshwater]",
"Geographic [Palearctic]",
"Geographic [Afrotropical]",
"Geographic [Indomalayan]",
"Geographic [Neartic]",
"Geographic [Australasian]",
"Geographic [Neotropical]",
"Method [Review/Opinion]",
"Method [Field sampling]",
"Method [Big data]",
"Method [Other]")
Estimates_m2$Variable <- order_var #Rename
Estimates_m2$Variable
Estimates_m2
#Refit with quasibinomial due to overdispersion
m2b  <- glm(cbind(prop,total) ~
year +
citation_residuals +
Domain +
Geography +
Method,
data = db_glm, family = "quasibinomial")
parameters(m2b)
levels(db_glm2$Geography)
db_glm2 <- db_glm[db_glm$Title_taxon == 0,]
db_glm2 <- db_glm2[db_glm2$Title_hab == 0,]
db_glm2 <- db_glm2[db_glm2$Geography != "Antarctic",] ; db_glm2 <- droplevels(db_glm2)
db_glm2$Geography <- droplevels(db_glm2$Geography)
#Balance of factors
table(db_glm2$Method)
table(db_glm2$Geography)
table(db_glm2$Domain)
#Initial model
m2  <- glm(cbind(prop,total) ~
year +
citation_residuals +
Domain +
Geography +
Method,
data = db_glm2, family = "binomial")
performance::check_overdispersion(m2) #overdispersed
#Refit with quasibinomial due to overdispersion
m2b  <- glm(cbind(prop,total) ~
year +
citation_residuals +
Domain +
Geography +
Method,
data = db_glm, family = "quasibinomial")
#Refit with quasibinomial due to overdispersion
m2b  <- glm(cbind(prop,total) ~
year +
citation_residuals +
Domain +
Geography +
Method,
data = db_glm2, family = "quasibinomial")
parameters(m2b)
performance::check_collinearity(m2b)
# posthoc
pairs(emmeans::emmeans(m2b, ~ Domain), simple=c("Domain"))
pairs(emmeans::emmeans(m2b, ~ Geography), simple="Geography")
pairs(emmeans::emmeans(m2b, ~ Method), simple="Method")
# Estract estimates
Estimates_m2 <-
m2b %>%
summary %>%
magrittr::extract2("coefficients") %>% # extract estimates
as.data.frame %>% rownames_to_column("Variable") %>%
dplyr::filter(!row_number() %in% 1) %>%  #remove intercept
dplyr::rename(SE = 3, z = 4, p = 5) #rename
#Set variable order and rename
order_var <- c("Year of publication",
"Citations (corrected by year)",
"Domain [Terrestrial]",
"Domain [Saltwater]",
"Domain [Freshwater]",
"Geographic [Palearctic]",
"Geographic [Afrotropical]",
"Geographic [Indomalayan]",
"Geographic [Neartic]",
"Geographic [Australasian]",
"Geographic [Neotropical]",
"Method [Review/Opinion]",
"Method [Field sampling]",
"Method [Big data]",
"Method [Other]")
Estimates_m2$Variable <- order_var #Rename
Estimates_m2$Variable <- factor(Estimates_m1$Variable, rev(order_var)) #sort
Estimates_m2$Variable <- factor(Estimates_m2$Variable, rev(order_var)) #sort
sign <- ifelse(Estimates_m1$p > 0.05, "", " *")
col_p <- ifelse(Estimates_m1$p > 0.05, "grey5", ifelse(Estimates_m1$Estimate>0,"orange","blue") )
(plot_model3 <- ggplot2::ggplot(data = Estimates_m2) +
geom_pointrange(aes(x = Variable,
y = Estimate,
ymin = Estimate-SE,
ymax = Estimate+SE), col = col_p, size = 0.5) +
geom_hline(lty = 3, size = 0.7, col = "grey50", yintercept = 0) +
geom_text(aes(Variable, Estimate),
label = paste0(round(Estimates_m1$Estimate,2),sign),
vjust = -1, size = 3, col = col_p) +
labs(y = expression(paste("Odds ratio" %+-% "Standard Error")),
x = NULL)+
theme_custom() + theme(axis.text.y  = element_text(colour = rev(col_p))) + coord_flip()
# geom_vline(lty = 1, size = 0.2, col = "blue", xintercept = 3.5)+
# geom_vline(lty = 1, size = 0.2, col = "blue", xintercept = 7.5)+
# geom_vline(lty = 1, size = 0.2, col = "blue", xintercept = 14.5)+
# geom_vline(lty = 1, size = 0.2, col = "blue", xintercept = 17.5)+
# geom_vline(lty = 1, size = 0.2, col = "blue", xintercept = 18.5)
)
sign <- ifelse(Estimates_m2$p > 0.05, "", " *")
col_p <- ifelse(Estimates_m2$p > 0.05, "grey5", ifelse(Estimates_m2$Estimate>0,"orange","blue") )
(plot_model3 <- ggplot2::ggplot(data = Estimates_m2) +
geom_pointrange(aes(x = Variable,
y = Estimate,
ymin = Estimate-SE,
ymax = Estimate+SE), col = col_p, size = 0.5) +
geom_hline(lty = 3, size = 0.7, col = "grey50", yintercept = 0) +
geom_text(aes(Variable, Estimate),
label = paste0(round(Estimates_m1$Estimate,2),sign),
vjust = -1, size = 3, col = col_p) +
labs(y = expression(paste("Odds ratio" %+-% "Standard Error")),
x = NULL)+
theme_custom() + theme(axis.text.y  = element_text(colour = rev(col_p))) + coord_flip()
# geom_vline(lty = 1, size = 0.2, col = "blue", xintercept = 3.5)+
# geom_vline(lty = 1, size = 0.2, col = "blue", xintercept = 7.5)+
# geom_vline(lty = 1, size = 0.2, col = "blue", xintercept = 14.5)+
# geom_vline(lty = 1, size = 0.2, col = "blue", xintercept = 17.5)+
# geom_vline(lty = 1, size = 0.2, col = "blue", xintercept = 18.5)
)
(plot_model3 <- ggplot2::ggplot(data = Estimates_m2) +
geom_pointrange(aes(x = Variable,
y = Estimate,
ymin = Estimate-SE,
ymax = Estimate+SE), col = col_p, size = 0.5) +
geom_hline(lty = 3, size = 0.7, col = "grey50", yintercept = 0) +
geom_text(aes(Variable, Estimate),
label = paste0(round(Estimates_m2$Estimate,2),sign),
vjust = -1, size = 3, col = col_p) +
labs(y = expression(paste("Odds ratio" %+-% "Standard Error")),
x = NULL)+
theme_custom() + theme(axis.text.y  = element_text(colour = rev(col_p))) + coord_flip()
# geom_vline(lty = 1, size = 0.2, col = "blue", xintercept = 3.5)+
# geom_vline(lty = 1, size = 0.2, col = "blue", xintercept = 7.5)+
# geom_vline(lty = 1, size = 0.2, col = "blue", xintercept = 14.5)+
# geom_vline(lty = 1, size = 0.2, col = "blue", xintercept = 17.5)+
# geom_vline(lty = 1, size = 0.2, col = "blue", xintercept = 18.5)
)
(plot_model3bis <- ggplot2::ggplot(data = Estimates_m2) +
geom_pointrange(aes(x = Variable,
y = Estimate,
ymin = Estimate-SE,
ymax = Estimate+SE), col = col_p, size = 0.5) +
geom_hline(lty = 3, size = 0.7, col = "grey50", yintercept = 0) +
geom_text(aes(Variable, Estimate),
label = paste0(round(Estimates_m2$Estimate,2),sign),
vjust = -1, size = 3, col = col_p) +
labs(y = expression(paste("Odds ratio" %+-% "Standard Error")),
x = NULL)+
theme_custom() + theme(axis.text.y  = element_text(colour = rev(col_p))) + coord_flip()
# geom_vline(lty = 1, size = 0.2, col = "blue", xintercept = 3.5)+
# geom_vline(lty = 1, size = 0.2, col = "blue", xintercept = 7.5)+
# geom_vline(lty = 1, size = 0.2, col = "blue", xintercept = 14.5)+
# geom_vline(lty = 1, size = 0.2, col = "blue", xintercept = 17.5)+
# geom_vline(lty = 1, size = 0.2, col = "blue", xintercept = 18.5)
)
pdf(file = "Figure/Figure_3bis.pdf", width = 12, height =8)
plot_model3bis
dev.off()
db_glm2 <- db_glm2[db_glm2$Title_geo == 0,]
#Balance of factors
table(db_glm2$Method)
table(db_glm2$Geography)
table(db_glm2$Domain)
#Initial model
m2  <- glm(cbind(prop,total) ~
year +
citation_residuals +
Domain +
Geography +
Method,
data = db_glm2, family = "binomial")
performance::check_overdispersion(m2) #overdispersed
#Refit with quasibinomial due to overdispersion
m2b  <- glm(cbind(prop,total) ~
year +
citation_residuals +
Domain +
Geography +
Method,
data = db_glm2, family = "quasibinomial")
parameters(m2b)
performance::check_collinearity(m2b)
# posthoc
pairs(emmeans::emmeans(m2b, ~ Domain), simple=c("Domain"))
pairs(emmeans::emmeans(m2b, ~ Geography), simple="Geography")
pairs(emmeans::emmeans(m2b, ~ Method), simple="Method")
# Estract estimates
Estimates_m2 <-
m2b %>%
summary %>%
magrittr::extract2("coefficients") %>% # extract estimates
as.data.frame %>% rownames_to_column("Variable") %>%
dplyr::filter(!row_number() %in% 1) %>%  #remove intercept
dplyr::rename(SE = 3, z = 4, p = 5) #rename
#Set variable order and rename
order_var <- c("Year of publication",
"Citations (corrected by year)",
"Domain [Terrestrial]",
"Domain [Saltwater]",
"Domain [Freshwater]",
"Geographic [Palearctic]",
"Geographic [Afrotropical]",
"Geographic [Indomalayan]",
"Geographic [Neartic]",
"Geographic [Australasian]",
"Geographic [Neotropical]",
"Method [Review/Opinion]",
"Method [Field sampling]",
"Method [Big data]",
"Method [Other]")
Estimates_m2$Variable <- order_var #Rename
Estimates_m2$Variable <- factor(Estimates_m2$Variable, rev(order_var)) #sort
sign <- ifelse(Estimates_m2$p > 0.05, "", " *")
col_p <- ifelse(Estimates_m2$p > 0.05, "grey5", ifelse(Estimates_m2$Estimate>0,"orange","blue") )
(plot_model3bis <- ggplot2::ggplot(data = Estimates_m2) +
geom_pointrange(aes(x = Variable,
y = Estimate,
ymin = Estimate-SE,
ymax = Estimate+SE), col = col_p, size = 0.5) +
geom_hline(lty = 3, size = 0.7, col = "grey50", yintercept = 0) +
geom_text(aes(Variable, Estimate),
label = paste0(round(Estimates_m2$Estimate,2),sign),
vjust = -1, size = 3, col = col_p) +
labs(y = expression(paste("Odds ratio" %+-% "Standard Error")),
x = NULL)+
theme_custom() + theme(axis.text.y  = element_text(colour = rev(col_p))) + coord_flip()
# geom_vline(lty = 1, size = 0.2, col = "blue", xintercept = 3.5)+
# geom_vline(lty = 1, size = 0.2, col = "blue", xintercept = 7.5)+
# geom_vline(lty = 1, size = 0.2, col = "blue", xintercept = 14.5)+
# geom_vline(lty = 1, size = 0.2, col = "blue", xintercept = 17.5)+
# geom_vline(lty = 1, size = 0.2, col = "blue", xintercept = 18.5)
)
pdf(file = "Figure/Figure_3bis.pdf", width = 12, height =8)
plot_model3bis
dev.off()
pdf(file = "Figure/Figure_3bis.pdf", width = 12, height =8)
plot_model3bis
dev.off()
db_no_moderators <- [db$Title_taxon == 0 | db$Title_hab == 0 | db_glm2$Title_geo == 0,]
db_no_moderators <- db[db$Title_taxon == 0 | db$Title_hab == 0 | db_glm2$Title_geo == 0,]
db_no_moderators <- db[db$Title_taxon == 0 | db$Title_hab == 0 | db$Title_geo == 0,]
db_no_moderators <- db[c(db$Title_taxon | db$Title_hab | db$Title_geo) != 1,]
db_no_moderators <- db[c(db$Title_taxon | db$Title_hab | db$Title_geo) != 1,]
vector <- sort(apply(db_no_moderators[,36:86],2, sum, na.rm = TRUE), decreasing = TRUE)
db2 <- data.frame(Phyla = names(vector), N = vector)
Taxa_to_rename <- ifelse(db2$N<10,db2$N,NA)
N_to_rename    <- sum(Taxa_to_rename,na.rm=TRUE)
Taxa_to_rename <- length(na.omit(Taxa_to_rename))
db2 <- db2[ 1 : (nrow(db2)-Taxa_to_rename), ]
db2 <- rbind(db2, data.frame(Phyla = paste0("Others (n = ",Taxa_to_rename,")"), N = N_to_rename))
db2$Phyla <- factor(db2$Phyla,levels = db2$Phyla)
(figure_4bis <- ggplot(db2, aes(x= Phyla, y=N))+
geom_bar(aes(fill= Type),stat="identity", alpha=1, colour = "black")  +
labs(x = NULL, y = "Count")+
scale_fill_manual(values = rev(RColorBrewer::brewer.pal(5, "Blues")))+
theme_custom() + theme(axis.text.x = element_text(angle = 70, hjust=1 ))
)
(figure_4bis <- ggplot(db2, aes(x= Phyla, y=N))+
geom_bar(stat="identity", alpha=1, colour = "black")  +
labs(x = NULL, y = "Count")+
scale_fill_manual(values = rev(RColorBrewer::brewer.pal(5, "Blues")))+
theme_custom() + theme(axis.text.x = element_text(angle = 70, hjust=1 ))
)
db_no_moderators <- db[c(db$Title_taxon | db$Title_hab | db$Title_geo) != 1,]
vector <- sort(apply(db_no_moderators[,36:86],2, sum, na.rm = TRUE), decreasing = TRUE)
db2 <- data.frame(Phyla = names(vector), N = vector)
Taxa_to_rename <- ifelse(db2$N<2,db2$N,NA)
N_to_rename    <- sum(Taxa_to_rename,na.rm=TRUE)
Taxa_to_rename <- length(na.omit(Taxa_to_rename))
db2 <- db2[ 1 : (nrow(db2)-Taxa_to_rename), ]
db2 <- rbind(db2, data.frame(Phyla = paste0("Others (n = ",Taxa_to_rename,")"), N = N_to_rename))
db2 <- cbind(db2, Type = c(rep("Animal",2),
"Plant",
rep("Animal",2),
"Plant",
"Microorganism",
"Plant",
rep("Animal",3),
"Plant",
"Animal",
"Plant",
"Animal",
"Fungi",
"Microorganism",
rep("Animal",2),
"Fungi",
"Multiple"
))
db2 <- rbind(db2, data.frame(Phyla = paste0("Others (n = ",Taxa_to_rename,")"), N = N_to_rename))
db2$Phyla <- factor(db2$Phyla,levels = db2$Phyla)
db_no_moderators <- db[c(db$Title_taxon | db$Title_hab | db$Title_geo) != 1,]
vector <- sort(apply(db_no_moderators[,36:86],2, sum, na.rm = TRUE), decreasing = TRUE)
db2 <- data.frame(Phyla = names(vector), N = vector)
Taxa_to_rename <- ifelse(db2$N<2,db2$N,NA)
N_to_rename    <- sum(Taxa_to_rename,na.rm=TRUE)
Taxa_to_rename <- length(na.omit(Taxa_to_rename))
db2 <- db2[ 1 : (nrow(db2)-Taxa_to_rename), ]
db2 <- rbind(db2, data.frame(Phyla = paste0("Others (n = ",Taxa_to_rename,")"), N = N_to_rename))
db2$Phyla <- factor(db2$Phyla,levels = db2$Phyla)
(figure_4bis <- ggplot(db2, aes(x= Phyla, y=N))+
geom_bar(stat="identity", alpha=1, colour = "black")  +
labs(x = NULL, y = "Count")+
scale_fill_manual(values = rev(RColorBrewer::brewer.pal(5, "Blues")))+
theme_custom() + theme(axis.text.x = element_text(angle = 70, hjust=1 ))
)
pdf(file = "Figure/Figure_4.pdf", width = 12, height =8)
figure_4bis
dev.off()
library("Amelia")
library("dplyr")
library("gam")
library("ggplot2")
library("MuMIn")
library("parameters")
library("performance")
library("sjPlot")
library("PupillometryR")
library("tidyr")
library("tidytext")
library("tidyverse")
library("wordcloud")
library("RColorBrewer")
source("Script/Functions.R")
db <- read.csv(file = "Data/Database_Full_study.csv", sep = '\t', dec='.', header = TRUE, as.is = FALSE)
str(db)
dim(db)
# Selecting paper to analyse
db <- db %>% filter(Analysis == "yes") ; db <- droplevels(db)
dim(db)
# Checking factor levels
levels(db$Geography)
levels(db$Domain)
levels(db$Method_data_collection)
# Calculating proportion of biodiversity
db$Biodiversity_prop <- rowSums(db[,36:91]) / length(36:91)
db$Animals_prop      <- rowSums(db[,c(36:70,89)]) / length(c(36:70,89))
db$Plants_prop       <- rowSums(db[,c(71:75,90)]) / length(c(71:75,90))
db$Fungi_prop        <- rowSums(db[,c(76:84,91)]) / length(c(76:84,91))
db$Micro_prop        <- rowSums(db[,c(85:88)])    / length(c(85:88))
colnames(db)
4/56
#Refit with quasibinomial due to overdispersion
m2b  <- glm(cbind(prop,total) ~
year +
citation_residuals*Method +
Domain +
Geography +
Method,
data = db_glm2, family = "quasibinomial")
parameters(m2b)
#Refit with quasibinomial due to overdispersion
m2b  <- glm(cbind(prop,total) ~
year +
citation_residuals*Geography +
Domain +
Geography +
Method,
data = db_glm2, family = "quasibinomial")
parameters(m2b)
