box3 <- semi_colon_splitter(input1 = db$Method_data_collection,
input2 = db$Biodiversity_prop,
names = c("Method","Biodiversity_prop"))
box3$Biodiversity_prop <- as.numeric(as.character(box3$Biodiversity_prop))
ggplot(data = box3 %>% drop_na(Method,Biodiversity_prop),
aes(x = Method, y = Biodiversity_prop)) +
geom_flat_violin(position = position_nudge(x = 0.2, y = 0), alpha = 0.4, fill= "turquoise3") +
geom_boxplot(width = 0.2, outlier.shape = NA, alpha = 0.4,fill= "orangered") +
geom_point(position = position_jitter(width = 0.15), size = 1, alpha = 0.7, fill= "grey20") +
labs(y = "Biodiversity (Proportion)", x = NULL) +
theme_classic()
ggplot(data = db %>% drop_na(Title_adjecties,Biodiversity_prop),
aes(x = Title_adjecties, y = Biodiversity_prop)) +
geom_flat_violin(position = position_nudge(x = 0.2, y = 0), alpha = 0.4, fill= "turquoise3") +
geom_boxplot(width = 0.2, outlier.shape = NA, alpha = 0.4,fill= "orangered") +
geom_point(position = position_jitter(width = 0.15), size = 1, alpha = 0.7, fill= "grey20") +
labs(y = "Biodiversity (Proportion)", x = "N° of classifiers for biodiversity") +
theme_classic()
t1 <- semi_colon_splitter(input1 = db$Method_data_collection,
input2 = db$Publication_year,
names = c("Method","year"))
t1_prop <- t1  %>% group_by(year) %>% count(Method)
t1_tot <- data.frame(table(t1$year)) ; colnames(t1_tot) <- c("year", "Tot")
t1 <- data.frame(dplyr::left_join(t1_prop,t1_tot, by = "year"))
rm(t1_prop,t1_tot) #cleanù
t1$year <- as.numeric(as.character(t1$year))
# Modelling the temporal trends
model   <- list()
par     <- list()
for (i in levels(factor(t1$Method))) {
db_i <- t1[t1$Method==i, ]
model[[i]]   <- glm(cbind(n,Tot) ~ year, data = db_i, family = "binomial")
par[[i]]     <- parameters::model_parameters(model[[i]])
}
y2 <- seq(from = min(t1$year), to = max(t1$year), 1) #temporal series of interest
(Plot_trend1 <- ggplot() +
ylab("Relative proportion of studies") + xlab(NULL) +
#trend lines
geom_line(aes(y = logisticline(y2,model[[1]]), x = y2), colour = COL[1],linetype="solid",size=1.1,alpha=1)+
geom_line(aes(y = logisticline(y2,model[[2]]), x = y2), colour = COL[2],linetype="solid",size=1.1,alpha=1)+
geom_line(aes(y = logisticline(y2,model[[3]]), x = y2), colour = COL[3],linetype="solid",size=1.1,alpha=1)+
geom_line(aes(y = logisticline(y2,model[[4]]), x = y2), colour = COL[4],linetype="solid",size=1.1,alpha=1)+
geom_line(aes(y = logisticline(y2,model[[5]]), x = y2), colour = COL[5],linetype="solid",size=1.1,alpha=1)+
#confidence intervals
geom_ribbon(aes(ymax = logisticline_max(y2, model[[01]]),
ymin = logisticline_min(y2, model[[01]]),x = y2),alpha = 0.5,fill=COL[1])+
geom_ribbon(aes(ymax = logisticline_max(y2, model[[02]]),
ymin = logisticline_min(y2, model[[02]]),x = y2),alpha = 0.5,fill=COL[2])+
geom_ribbon(aes(ymax = logisticline_max(y2, model[[03]]),
ymin = logisticline_min(y2, model[[03]]),x = y2),alpha = 0.5,fill=COL[3])+
geom_ribbon(aes(ymax = logisticline_max(y2, model[[04]]),
ymin = logisticline_min(y2, model[[04]]),x = y2),alpha = 0.5,fill=COL[4])+
geom_ribbon(aes(ymax = logisticline_max(y2, model[[05]]),
ymin = logisticline_min(y2, model[[05]]),x = y2),alpha = 0.5, fill=COL[5])+
#Text
annotate(geom="text", hjust = 0,vjust = 0.3,
x= 2020.5, y= logisticline_max(y2, model[[01]])[21],
label = levels(factor(t1$Method))[1],
color=COL[1],alpha=1)+
annotate(geom="text", hjust = 0,vjust = 0,
x= 2020.5, y= logisticline_max(y2, model[[02]])[21],
label = levels(factor(t1$Method))[2],
color=COL[2],alpha=1)+
annotate(geom="text", hjust = 0,vjust = 0,
x= 2020.5, y= logisticline_max(y2, model[[03]])[21],
label = levels(factor(t1$Method))[3],
color=COL[3],alpha=1)+
annotate(geom="text", hjust = 0,vjust = 0,
x= 2020.5, y= logisticline_max(y2, model[[04]])[21],
label = levels(factor(t1$Method))[4],
color=COL[4],alpha=1)+
annotate(geom="text", hjust = 0,vjust = 0,
x= 2020.5, y= logisticline_max(y2, model[[05]])[21],
label = levels(factor(t1$Method))[5],
color=COL[5])+
coord_cartesian(xlim = c(2000, 2020), # This focuses the x-axis on the range of interest
clip = 'off') +   # This keeps the labels from disappearing
theme_classic() + theme(plot.margin = unit(c(0.5,4,0.5,0.5), 'cm'))
)
range(db$Publication_year)
t2 <- semi_colon_splitter(input1 = db$Geography,
input2 = db$Publication_year,
names = c("Geography","year"))
t2_prop <- t2  %>% group_by(year) %>% count(Geography)
t2_tot <- data.frame(table(t2$year)) ; colnames(t2_tot) <- c("year", "Tot")
t2 <- data.frame(dplyr::left_join(t2_prop,t2_tot, by = "year"))
rm(t2_prop,t2_tot) #cleanù
t2$year <- as.numeric(as.character(t2$year))
# Modelling the temporal trends
model   <- list()
par     <- list()
for (i in levels(factor(t2$Geography))) {
db_i <- t2[t2$Geography==i, ]
model[[i]]   <- glm(cbind(n,Tot) ~ year, data = db_i, family = "binomial")
par[[i]]     <- parameters::model_parameters(model[[i]])
}
y2 <- seq(from = min(t2$year), to = max(t2$year), 1) #temporal series of interest
(Plot_trend2 <- ggplot() +
ylab("Relative proportion of studies") + xlab(NULL)+ #ylim(0,0.3)+
#trend lines
geom_line(aes(y = logisticline(y2,model[[1]]), x = y2), colour = COL[1],linetype="solid",size=1.1,alpha=1)+
geom_line(aes(y = logisticline(y2,model[[2]]), x = y2), colour = COL[2],linetype="solid",size=1.1,alpha=1)+
geom_line(aes(y = logisticline(y2,model[[3]]), x = y2), colour = COL[3],linetype="solid",size=1.1,alpha=1)+
geom_line(aes(y = logisticline(y2,model[[4]]), x = y2), colour = COL[4],linetype="solid",size=1.1,alpha=1)+
geom_line(aes(y = logisticline(y2,model[[5]]), x = y2), colour = COL[5],linetype="solid",size=1.1,alpha=1)+
geom_line(aes(y = logisticline(y2,model[[6]]), x = y2), colour = COL[6],linetype="solid",size=1.1,alpha=1)+
geom_line(aes(y = logisticline(y2,model[[7]]), x = y2), colour = COL[7],linetype="solid",size=1.1,alpha=1)+
geom_line(aes(y = logisticline(y2,model[[8]]), x = y2), colour = COL[8],linetype="solid",size=1.1,alpha=1)+
#confidence intervals
geom_ribbon(aes(ymax = logisticline_max(y2, model[[01]]),
ymin = logisticline_min(y2, model[[01]]),x = y2),alpha = 0.5,fill=COL[1])+
geom_ribbon(aes(ymax = logisticline_max(y2, model[[02]]),
ymin = logisticline_min(y2, model[[02]]),x = y2),alpha = 0.5,fill=COL[2])+
geom_ribbon(aes(ymax = logisticline_max(y2, model[[03]]),
ymin = logisticline_min(y2, model[[03]]),x = y2),alpha = 0.5,fill=COL[3])+
geom_ribbon(aes(ymax = logisticline_max(y2, model[[04]]),
ymin = logisticline_min(y2, model[[04]]),x = y2),alpha = 0.5,fill=COL[4])+
geom_ribbon(aes(ymax = logisticline_max(y2, model[[05]]),
ymin = logisticline_min(y2, model[[05]]),x = y2),alpha = 0.5, fill=COL[5])+
geom_ribbon(aes(ymax = logisticline_max(y2, model[[06]]),
ymin = logisticline_min(y2, model[[06]]),x = y2),alpha = 0.5, fill=COL[6])+
geom_ribbon(aes(ymax = logisticline_max(y2, model[[07]]),
ymin = logisticline_min(y2, model[[07]]),x = y2),alpha = 0.5, fill=COL[7])+
geom_ribbon(aes(ymax = logisticline_max(y2, model[[08]]),
ymin = logisticline_min(y2, model[[08]]),x = y2),alpha = 0.5, fill=COL[8])+
#Text
annotate(geom="text", hjust = 0,vjust = 0.3,
x= 2020.5, y= logisticline_max(y2, model[[01]])[21],
label = levels(factor(t2$Geography))[1],
color=COL[1],alpha=1)+
annotate(geom="text", hjust = 0,vjust = 0,
x= 2020.5, y= logisticline_max(y2, model[[02]])[21],
label = levels(factor(t2$Geography))[2],
color=COL[2],alpha=1)+
annotate(geom="text", hjust = 0,vjust = 0,
x= 2020.5, y= logisticline_max(y2, model[[03]])[21],
label = levels(factor(t2$Geography))[3],
color=COL[3],alpha=1)+
annotate(geom="text", hjust = 0,vjust = 0,
x= 2020.5, y= logisticline_max(y2, model[[04]])[21],
label = levels(factor(t2$Geography))[4],
color=COL[4],alpha=1)+
annotate(geom="text", hjust = 0,vjust = 0,
x= 2020.5, y= logisticline_max(y2, model[[05]])[21],
label = levels(factor(t2$Geography))[5],
color=COL[5])+
annotate(geom="text", hjust = 0,vjust = 0,
x= 2020.5, y= logisticline_max(y2, model[[06]])[21],
label = levels(factor(t2$Geography))[6],
color=COL[6])+
annotate(geom="text", hjust = 0,vjust = 0,
x= 2020.5, y= logisticline_max(y2, model[[07]])[21],
label = levels(factor(t2$Geography))[7],
color=COL[7])+
annotate(geom="text", hjust = 0,vjust = 0,
x= 2020.5, y= logisticline_max(y2, model[[08]])[21],
label = levels(factor(t2$Geography))[8],
color=COL[8])+
coord_cartesian(xlim = c(2000, 2020), # This focuses the x-axis on the range of interest
clip = 'off') +   # This keeps the labels from disappearing
theme_classic() + theme(plot.margin = unit(c(0.5,4,0.5,0.5), 'cm'))
)
# Modelling the temporal trends
model   <- list()
model[[1]]   <- glm(cbind(Taxonomic_div,Tot) ~ year, data = t3, family = "binomial")
model[[2]]   <- glm(cbind(Phylogenetic_div,Tot) ~ year, data = t3, family = "binomial")
model[[3]]   <- glm(cbind(Functional_div,Tot) ~ year, data = t3, family = "binomial")
model[[4]]   <- glm(cbind(Other_div,Tot) ~ year, data = t3, family = "binomial")
t3_prop <- db  %>% group_by(Publication_year) %>%
summarize(Taxonomic_div = sum(Taxonomic_div,na.rm = T ),
Phylogenetic_div = sum(Phylogenetic_div,na.rm = T),
Functional_div = sum(Functional_div,na.rm = T),
Other_div = sum(Other_div,na.rm = T))
t3 <- data.frame(t3_prop, Tot = rowSums(t3_prop[,2:5]))
colnames(t3)[1] <- "year"
# Modelling the temporal trends
model   <- list()
model[[1]]   <- glm(cbind(Taxonomic_div,Tot) ~ year, data = t3, family = "binomial")
model[[2]]   <- glm(cbind(Phylogenetic_div,Tot) ~ year, data = t3, family = "binomial")
model[[3]]   <- glm(cbind(Functional_div,Tot) ~ year, data = t3, family = "binomial")
model[[4]]   <- glm(cbind(Other_div,Tot) ~ year, data = t3, family = "binomial")
y2 <- seq(from = min(t3$year), to = max(t3$year), 1) #temporal series of interest
(Plot_trend3 <- ggplot() +
ylab("Relative proportion of studies") + xlab(NULL)+ #ylim(0,0.3)+
#trend lines
geom_line(aes(y = logisticline(y2,model[[1]]), x = y2), colour = COL[1],linetype="solid",size=1.1,alpha=1)+
geom_line(aes(y = logisticline(y2,model[[2]]), x = y2), colour = COL[2],linetype="solid",size=1.1,alpha=1)+
geom_line(aes(y = logisticline(y2,model[[3]]), x = y2), colour = COL[3],linetype="solid",size=1.1,alpha=1)+
geom_line(aes(y = logisticline(y2,model[[4]]), x = y2), colour = COL[4],linetype="solid",size=1.1,alpha=1)+
#confidence intervals
geom_ribbon(aes(ymax = logisticline_max(y2, model[[01]]),
ymin = logisticline_min(y2, model[[01]]),x = y2),alpha = 0.5,fill=COL[1])+
geom_ribbon(aes(ymax = logisticline_max(y2, model[[02]]),
ymin = logisticline_min(y2, model[[02]]),x = y2),alpha = 0.5,fill=COL[2])+
geom_ribbon(aes(ymax = logisticline_max(y2, model[[03]]),
ymin = logisticline_min(y2, model[[03]]),x = y2),alpha = 0.5,fill=COL[3])+
geom_ribbon(aes(ymax = logisticline_max(y2, model[[04]]),
ymin = logisticline_min(y2, model[[04]]),x = y2),alpha = 0.5,fill=COL[4])+
#Text
annotate(geom="text", hjust = 0,vjust = 0.3,
x= 2020.5, y= logisticline_max(y2, model[[01]])[21],
label = "Taxonomic diversity",
color=COL[1],alpha=1)+
annotate(geom="text", hjust = 0,vjust = 0,
x= 2020.5, y= logisticline_max(y2, model[[02]])[21]-0.03,
label = "Phylogenetic diversity",
color=COL[2],alpha=1)+
annotate(geom="text", hjust = 0,vjust = 0,
x= 2020.5, y= logisticline_max(y2, model[[03]])[21],
label = "Functional diversity",
color=COL[3],alpha=1)+
annotate(geom="text", hjust = 0,vjust = 0,
x= 2020.5, y= logisticline_max(y2, model[[04]])[21],
label = "Other diversity",
color=COL[4],alpha=1)+
coord_cartesian(xlim = c(2000, 2020), # This focuses the x-axis on the range of interest
clip = 'off') +   # This keeps the labels from disappearing
theme_classic() + theme(plot.margin = unit(c(0.5,4,0.5,0.5), 'cm'))
)
library("grid")
library("ggplot2")       # for plotting
library("gridExtra")     # for plates
library("overlapping")   # for overlap
library("tidyverse")     # for tidy operations
library("xlsx")
setwd("/Users/stefanomammola/Desktop/PAPERS IN CORSO/Nanni et al. Bats & COVID/mappa")
#-----------------------        FIGURE 1   -------------------------------
# Loading the datasets ---------------------------------------------------
library(rgeos)
library(rworldmap)
db_map= read.xlsx("Bats_news_dataset_R.xlsx", sheetName = "map")
str(db_map)
# get world map
wmap <- getMap(resolution="high")
world <- map_data("world")
# get centroids
centroids <- gCentroid(wmap, byid=TRUE)
# get a data.frame with centroids
df <- as.data.frame(centroids)
head(df)
#plot map
(map1 <- ggplot() +
geom_map(map = world, data = world,
aes(long, lat, map_id = region),
color = "gray50", fill = "gray95", size = 0.3) +
geom_point(data = db_map,
aes(x = lon, y = lat),
alpha = 0.8, size = 1.5,
shape = 16)+
ylim(-50,80)+
labs(title = "(a)", fill = "total_news", y = "Latitude [°]") +
scale_colour_manual(values = c("turquoise3", "orangered", "grey10")) +
theme_bw() +
theme(
axis.text.x  = element_text(size = 14,color="white"),
axis.text.y  = element_text(size = 14),
axis.title.y = element_text(size = 18),
axis.title.x = element_blank(),
axis.line.x = element_line(color="white"),
axis.line.y = element_line(color="black"),
panel.border = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_blank(),
plot.margin = unit(c(1, 1, 1, 1), units = , "cm"),
plot.title = element_text(size = 18, vjust = 1, hjust = 0),
legend.text = element_text(size = 12),
legend.title = element_blank(),
legend.position = c(0.1, 0.2),
legend.key = element_blank(),
legend.background = element_rect(color = "black",
fill = "white",
size = 2, linetype = "blank"))
)
#plot map
(map1 <- ggplot() +
geom_map(map = world, data = world,
aes(long, lat, map_id = region),
color = "gray50", fill = "gray95", size = 0.3) +
# geom_point(data = db_map,
#            aes(x = lon, y = lat),
#            alpha = 0.8, size = 1.5,
#            shape = 16)+
ylim(-50,80)+
labs(title = NULL, fill = "total_news", y = "Latitude [°]") +
scale_colour_manual(values = c("turquoise3", "orangered", "grey10")) +
theme_bw() +
theme(
axis.text.x  = element_text(size = 14,color="white"),
axis.text.y  = element_text(size = 14),
axis.title.y = element_text(size = 18),
axis.title.x = element_blank(),
axis.line.x = element_line(color="white"),
axis.line.y = element_line(color="black"),
panel.border = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_blank(),
plot.margin = unit(c(1, 1, 1, 1), units = , "cm"),
plot.title = element_text(size = 18, vjust = 1, hjust = 0),
legend.text = element_text(size = 12),
legend.title = element_blank(),
legend.position = c(0.1, 0.2),
legend.key = element_blank(),
legend.background = element_rect(color = "black",
fill = "white",
size = 2, linetype = "blank"))
)
db_map$radius <- sqrt(db_map$total_news)
db_map$radius
#plot map
(map1 <- ggplot() +
))
#plot map
(map1 <- ggplot() +
geom_map(map = world, data = world,
aes(long, lat, map_id = region),
color = "gray50", fill = "gray95", size = 0.3) +
# geom_point(data = db_map,
#            aes(x = lon, y = lat),
#            alpha = 0.8, size = 1.5,
#            shape = 16)+
ylim(-50,80)+ theme_bw()+
theme(
axis.text.x  = element_blank(),
axis.text.y  = element_blank(),
axis.title.y = element_blank(),
axis.title.x = element_blank(),
axis.line.x = element_blank(),
axis.line.y = element_blank(),
panel.border = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_blank(),
axis.ticks = element_blank(),
plot.margin = unit(c(1,1,1,1), 'cm'),
plot.title = element_text(size = 18, vjust = 1, hjust = 0),
legend.text = element_text(size = 12),
legend.title = element_blank(),
legend.position = c(0.1, 0.2),
legend.key = element_blank(),
legend.background = element_rect(color = "black",
fill = "white",
size = 2, linetype = "blank")))
db_map
(map2 <- map1 + geom_scatterpie(data=db_map, aes(x=lon, y=lat, r=radius),
color="grey10", alpha=.7) +
geom_scatterpie_legend(pie$radius, x= -150, y= -45, n = 3,
labeller = function (x) x=c(min(pie$n),max(pie$n)))+
#scale_fill_manual(values=col_fig2)
#scale_fill_manual("",labels=c("Not tested", "Tested"),values=col_fig2)
+ theme(legend.position = "top"))
library("scatterpie")
library("scatterpie")
db_map$radius <- sqrt(db_map$total_news)
(map2 <- map1 + geom_scatterpie(data=db_map, aes(x=lon, y=lat, r=radius),
color="grey10", alpha=.7) +
geom_scatterpie_legend(pie$radius, x= -150, y= -45, n = 3,
labeller = function (x) x=c(min(pie$n),max(pie$n)))+
#scale_fill_manual(values=col_fig2)
#scale_fill_manual("",labels=c("Not tested", "Tested"),values=col_fig2)
+ theme(legend.position = "top"))
db_map
(map2 <- map1 + geom_scatterpie(data=db_map, aes(x=lon, y=lat, r=radius),
color="grey10", alpha=.7) +
geom_scatterpie_legend(db_map$radius, x= -150, y= -45, n = 2,
labeller = function (x) x=c(min(db_map$total_news),max(db_map$total_news)))+
#scale_fill_manual(values=col_fig2)
#scale_fill_manual("",labels=c("Not tested", "Tested"),values=col_fig2)
+ theme(legend.position = "top"))
str(db_map)
min(db_map$total_news)
max(db_map$total_news)
db_map$radius
db_map
map1 + geom_scatterpie(data=db_map, aes(x=lon, y=lat, r=radius),
fill = "grey10" , color="grey10", alpha=.7)
map1 + geom_scatterpie(data=db_map, aes(x=lon, y=lat, r=radius),
fill = "grey10" , color="grey10", alpha=.7)
db_map
#plot map
(map1 <- ggplot() +
geom_map(map = world, data = world,
aes(long, lat, map_id = region),
color = "gray50", fill = "gray95", size = 0.3) +
# geom_point(data = db_map,
#            aes(x = lon, y = lat),
#            alpha = 0.8, size = 1.5,
#            shape = 16)+
ylim(-50,80)+ theme_bw()+
theme(
axis.text.x  = element_blank(),
axis.text.y  = element_blank(),
axis.title.y = element_blank(),
axis.title.x = element_blank(),
axis.line.x = element_blank(),
axis.line.y = element_blank(),
panel.border = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_blank(),
axis.ticks = element_blank(),
plot.margin = unit(c(1,1,1,1), 'cm'),
plot.title = element_text(size = 18, vjust = 1, hjust = 0),
legend.text = element_text(size = 12),
legend.title = element_blank(),
legend.position = c(0.1, 0.2),
legend.key = element_blank(),
legend.background = element_rect(color = "black",
fill = "white",
size = 2, linetype = "blank")))
library("scatterpie")
db_map$radius <- sqrt(db_map$total_news)
(map2 <- map1 + geom_scatterpie(aes(x=long, y=lat, r=radius), # group=region
data=db_map, cols = c("X2018","X2019","X2020"), color=NA, alpha=.9) +
geom_scatterpie_legend(pie$radius, x= -150, y= -45, n = 2,
labeller = function (x) x=c(min(pie$n),max(pie$n)))+
#scale_fill_manual(values=col_fig2)
scale_fill_manual("",c("2018","2019","2020"),values=c("red","blue","black"))
+ theme(legend.position = "top"))
(map2 <- map1 + geom_scatterpie(aes(x=long, y=lat, r=radius), # group=region
data=db_map, cols = c("X2018","X2019","X2020"), color=NA, alpha=.9) +
geom_scatterpie_legend(db_map$radius, x= -150, y= -45, n = 2,
labeller = function (x) x=c(min(db_map$n),max(db_map$n)))+
#scale_fill_manual(values=col_fig2)
scale_fill_manual("",c("2018","2019","2020"),values=c("red","blue","black"))
+ theme(legend.position = "top"))
(map2 <- map1 + geom_scatterpie(aes(x=lon, y=lat, r=radius), # group=region
data=db_map, cols = c("X2018","X2019","X2020"), color=NA, alpha=.9) +
geom_scatterpie_legend(db_map$radius, x= -150, y= -45, n = 2,
labeller = function (x) x=c(min(db_map$n),max(db_map$n)))+
#scale_fill_manual(values=col_fig2)
scale_fill_manual("",c("2018","2019","2020"),values=c("red","blue","black"))
+ theme(legend.position = "top"))
(map2 <- map1 + geom_scatterpie(aes(x=lon, y=lat, r=radius), # group=region
data=db_map, cols = c("X2018","X2019","X2020"), color=NA, alpha=.7) +
geom_scatterpie_legend(db_map$radius, x= -150, y= -45, n = 2,
labeller = function (x) x=c(min(db_map$total_news),max(db_map$total_news)))+
#scale_fill_manual(values=col_fig2)
scale_fill_manual("",c("2018","2019","2020"),values=c("red","blue","black"))
+ theme(legend.position = "top"))
(map2 <- map1 + geom_scatterpie(aes(x=lon, y=lat, r=radius), # group=region
data=db_map, cols = c("X2018","X2019","X2020"), color=NA, alpha=.8) +
geom_scatterpie_legend(db_map$radius, x= -150, y= -45, n = 2,
labeller = function (x) x=c(min(db_map$total_news),max(db_map$total_news)))+
#scale_fill_manual(values=col_fig2)
scale_fill_manual("",c("2018","2019","2020"),values=c("red","blue","black"))
+ theme(legend.position = "top"))
db_map$radius <- sqrt(db_map$total_news)
(map2 <- map1 + geom_scatterpie(aes(x=lon, y=lat, r=radius), # group=region
data=db_map, cols = c("X2018","X2019","X2020"), color=NA, alpha=.8) +
geom_scatterpie_legend(db_map$radius, x= -150, y= -25, n = 2,
labeller = function (x) x=c(min(db_map$total_news),max(db_map$total_news)))+
#scale_fill_manual(values=col_fig2)
scale_fill_manual("",c("2018","2019","2020"),values=c("red","blue","black"))
+ theme(legend.position = "top"))
(map2 <- map1 + geom_scatterpie(aes(x=lon, y=lat, r=radius), # group=region
data=db_map, cols = c("X2018","X2019","X2020"), color=NA, alpha=.8) +
geom_scatterpie_legend(db_map$radius, x= -150, y= -25, n = 2,
labeller = function (x) x=c(min(db_map$total_news),max(db_map$total_news)))+
#scale_fill_manual(values=col_fig2)
scale_fill_manual("",c("2018","2019","2020"),values=c("grey30","balck","blueviolet"))
+ theme(legend.position = "top"))
col_map = c("grey30","black","blueviolet")
(map2 <- map1 + geom_scatterpie(aes(x=lon, y=lat, r=radius), # group=region
data=db_map, cols = c("X2018","X2019","X2020"), color=NA, alpha=.8) +
geom_scatterpie_legend(db_map$radius, x= -150, y= -25, n = 2,
labeller = function (x) x=c(min(db_map$total_news),max(db_map$total_news)))+
scale_fill_manual(values=col_map)
scale_fill_manual("",c("2018","2019","2020"),values=col_map)
+ theme(legend.position = "top"))
(map2 <- map1 + geom_scatterpie(aes(x=lon, y=lat, r=radius), # group=region
data=db_map, cols = c("X2018","X2019","X2020"), color=NA, alpha=.8) +
geom_scatterpie_legend(db_map$radius, x= -150, y= -25, n = 2,
labeller = function (x) x=c(min(db_map$total_news),max(db_map$total_news)))+
scale_fill_manual(values=col_map)+
scale_fill_manual("",c("2018","2019","2020"),values=col_map)+ theme(legend.position = "top"))
(map2 <- map1 + geom_scatterpie(aes(x=lon, y=lat, r=radius), # group=region
data=db_map, cols = c("X2018","X2019","X2020"), color=NA, alpha=.8) +
geom_scatterpie_legend(db_map$radius, x= -150, y= -25, n = 2,
labeller = function (x) x=c(min(db_map$total_news),max(db_map$total_news)))+
scale_col_manual(values=col_map)+
scale_fill_manual("",c("2018","2019","2020"),values=col_map)+ theme(legend.position = "top"))
(map2 <- map1 + geom_scatterpie(aes(x=lon, y=lat, r=radius), # group=region
data=db_map, cols = c("X2018","X2019","X2020"), color=NA, alpha=.8) +
geom_scatterpie_legend(db_map$radius, x= -150, y= -25, n = 2,
labeller = function (x) x=c(min(db_map$total_news),max(db_map$total_news)))+
scale_color_manual(values=col_map)+
scale_fill_manual("",c("2018","2019","2020"),values=col_map)+ theme(legend.position = "top"))
(map2 <- map1 + geom_scatterpie(aes(x=lon, y=lat, r=radius), # group=region
data=db_map, cols = c("X2018","X2019","X2020"), color=NA, alpha=.9) +
geom_scatterpie_legend(db_map$radius, x= -150, y= -25, n = 2,
labeller = function (x) x=c(min(db_map$total_news),max(db_map$total_news)))+
#scale_color_manual(values=col_map)+
scale_fill_manual("",c("2018","2019","2020"),values=col_map)+ theme(legend.position = "top"))
(map2 <- map1 + geom_scatterpie(aes(x=lon, y=lat, r=radius), # group=region
data=db_map, cols = c("X2018","X2019","X2020"), color="grey20", alpha=.9) +
geom_scatterpie_legend(db_map$radius, x= -150, y= -25, n = 2,
labeller = function (x) x=c(min(db_map$total_news),max(db_map$total_news)))+
#scale_color_manual(values=col_map)+
scale_fill_manual("",c("2018","2019","2020"),values=col_map)+ theme(legend.position = "top"))
col_map = c("blue","black","blueviolet")
(map2 <- map1 + geom_scatterpie(aes(x=lon, y=lat, r=radius), # group=region
data=db_map, cols = c("X2018","X2019","X2020"), color="grey20", alpha=.9) +
geom_scatterpie_legend(db_map$radius, x= -150, y= -25, n = 2,
labeller = function (x) x=c(min(db_map$total_news),max(db_map$total_news)))+
#scale_color_manual(values=col_map)+
scale_fill_manual("",c("2018","2019","2020"),values=col_map)+ theme(legend.position = "top"))
