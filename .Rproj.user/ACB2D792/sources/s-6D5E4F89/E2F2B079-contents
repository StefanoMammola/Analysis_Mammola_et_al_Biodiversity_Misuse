## ------------------------------------------------------------------------
## 'Biodiversity misuse'
## ------------------------------------------------------------------------

## ------------------------------------------------------------------------
# 'R script to reproduce the pilot analysis'
## ------------------------------------------------------------------------

# Notes that this code was run for preliminary analyses on the pilot database. May contain mistakes in both the code and analysis.

# Analysis performed with R (v. R 4.1.0) and R studio (v. 1.4.1103)
# Authors: Stefano Mammola

# Clean the workspace -----------------------------------------------------

rm(list = ls())

# Loading R package -------------------------------------------------------

library("Amelia")
library("dplyr")
library("ggplot2")
library("MuMIn")
library("parameters")
library("performance")
library("sjPlot")
library("PupillometryR")
library("tidyr")
library("tidytext")
library("tidyverse")
library("wordcloud")

# Source functions and plot parameters ------------------------------------

source("Script/Functions.R")

# Loading database --------------------------------------------------------

db <- read.csv(file = "Data/Database_Pilot_study.csv", sep = '\t', dec='.', header = TRUE, as.is = FALSE)

str(db)
dim(db)

# Data cleaning -----------------------------------------------------------

# Selecting paper to analyse
db <- db %>% filter(Analysis == "yes")

dim(db)

# Checking factor levels
levels(db$Geography)
levels(db$Domain)
levels(db$Method_data_collection)

# Calculating proportion of biodiversity
db$Biodiversity_prop <- rowSums(db[,36:90]) / length(36:90)
db$Animals_prop      <- rowSums(db[,c(36:70,88)]) / length(c(36:70,88))
db$Plants_prop       <- rowSums(db[,c(71:75,89)]) / length(c(71:75,89))
db$Fungi_prop        <- rowSums(db[,c(76:84,90)]) / length(c(76:84,90))
db$Micro_prop        <- rowSums(db[,c(85:87)]) / length(85:97)

#Title fanciness
db$Title_fanciness <- rowSums(db[,c(23,24)])
table(db$Title_fanciness) #too few obs

# Calculating total number of specifics to the title
db$Title_adjecties <- as.factor(rowSums(db[,27:29]))

# Missing data 
Amelia::missmap(db)

# Data exploration -------------------------------------------------------

###### temporal trends ######

# all
ggplot(data = db, aes(x = Publication_year, y = Biodiversity_prop)) + 
  geom_point() +
  geom_smooth(method = "gam", formula = y ~ s(x), col="purple") +
  theme_classic()

range(db$Biodiversity_prop, na.rm = TRUE) ; mean(db$Biodiversity_prop, na.rm = TRUE)

# all (only fieldwork)
ggplot(data = db[db$Method_data_collection == "Field sampling",], 
       aes(x = Publication_year, y = Biodiversity_prop)) + 
  geom_point() +
  geom_smooth(method = "gam", formula = y ~ s(x), col="purple") +
  theme_classic()

# animals
ggplot(data = db[db$Animals_prop>0,], aes(x = Publication_year, y = Animals_prop)) + 
  geom_point() +
  geom_smooth(method = "gam", formula = y ~ s(x), col="purple") +
  theme_classic()

# plants
ggplot(data = db[db$Plants_prop>0,], aes(x = Publication_year, y = Plants_prop)) + 
  geom_point() +
  geom_smooth(method = "gam", formula = y ~ s(x), col="purple") +
  theme_classic()

# fungi
ggplot(data = db[db$Fungi_prop>0,], aes(x = Publication_year, y = Fungi_prop)) + 
  geom_point() +
  geom_smooth(method = "gam", formula = y ~ s(x), col="purple") +
  theme_classic()

# micro
ggplot(data = db[db$Micro_prop>0,], aes(x = Publication_year, y = Fungi_prop)) + 
  geom_point() +
  geom_smooth(method = "gam", formula = y ~ s(x), col="purple") +
  theme_classic()

###### Geographical patterns ######

box1 <- semi_colon_splitter(input1 = db$Geography,
                            input2 = db$Biodiversity_prop, 
                            names  = c("Geography","Biodiversity_prop"))

box1$Biodiversity_prop <- as.numeric(as.character(box1$Biodiversity_prop))

ggplot(data = box1 %>% drop_na(Geography,Biodiversity_prop), 
       aes(x = Geography, y = Biodiversity_prop)) +
  geom_flat_violin(position = position_nudge(x = 0.2, y = 0), alpha = 0.4, fill= "turquoise3") +
  geom_boxplot(width = 0.2, outlier.shape = NA, alpha = 0.4,fill= "orangered") +
  geom_point(position = position_jitter(width = 0.15), size = 1, alpha = 0.7, fill= "grey20") +
  labs(y = "Biodiversity (Proportion)", x = NULL) +
  theme_classic()

box2 <- semi_colon_splitter(input1 = db$Domain,
                            input2 = db$Biodiversity_prop, 
                            names = c("Domain","Biodiversity_prop"))

box2$Biodiversity_prop <- as.numeric(as.character(box2$Biodiversity_prop))

ggplot(data = box2 %>% drop_na(Domain,Biodiversity_prop), 
       aes(x = Domain, y = Biodiversity_prop)) +
  geom_flat_violin(position = position_nudge(x = 0.2, y = 0), alpha = 0.4, fill= "turquoise3") +
  geom_boxplot(width = 0.2, outlier.shape = NA, alpha = 0.4,fill= "orangered") +
  geom_point(position = position_jitter(width = 0.15), size = 1, alpha = 0.7, fill= "grey20") +
  labs(y = "Biodiversity (Proportion)", x = NULL) +
  theme_classic()

box3 <- semi_colon_splitter(input1 = db$Method_data_collection,
                            input2 = db$Biodiversity_prop, 
                            names = c("Method","Biodiversity_prop"))

box3$Biodiversity_prop <- as.numeric(as.character(box3$Biodiversity_prop))

ggplot(data = box3 %>% drop_na(Method,Biodiversity_prop), 
       aes(x = Method, y = Biodiversity_prop)) +
  geom_flat_violin(position = position_nudge(x = 0.2, y = 0), alpha = 0.4, fill= "turquoise3") +
  geom_boxplot(width = 0.2, outlier.shape = NA, alpha = 0.4,fill= "orangered") +
  geom_point(position = position_jitter(width = 0.15), size = 1, alpha = 0.7, fill= "grey20") +
  labs(y = "Biodiversity (Proportion)", x = NULL) +
  theme_classic()

# Adjectives --------------------------------------------------------------

ggplot(data = db %>% drop_na(Title_adjecties,Biodiversity_prop), 
       aes(x = Title_adjecties, y = Biodiversity_prop)) +
  geom_flat_violin(position = position_nudge(x = 0.2, y = 0), alpha = 0.4, fill= "turquoise3") +
  geom_boxplot(width = 0.2, outlier.shape = NA, alpha = 0.4,fill= "orangered") +
  geom_point(position = position_jitter(width = 0.15), size = 1, alpha = 0.7, fill= "grey20") +
  labs(y = "Biodiversity (Proportion)", x = "N° of classifiers for biodiversity") +
  theme_classic()

# Trends over time in methods and geography -------------------------------

t1 <- semi_colon_splitter(input1 = db$Method_data_collection,
                            input2 = db$Publication_year, 
                            names = c("Method","year"))

t1_prop <- t1  %>% group_by(year) %>% count(Method)
t1_tot <- data.frame(table(t1$year)) ; colnames(t1_tot) <- c("year", "Tot")

t1 <- data.frame(dplyr::left_join(t1_prop,t1_tot, by = "year"))

rm(t1_prop,t1_tot) #cleanù

t1$year <- as.numeric(as.character(t1$year))

# Modelling the temporal trends
model   <- list()
par     <- list()

for (i in levels(factor(t1$Method))) {
  
  db_i <- t1[t1$Method==i, ]
  model[[i]]   <- glm(cbind(n,Tot) ~ year, data = db_i, family = "binomial")
  par[[i]]     <- parameters::model_parameters(model[[i]])
  
}  

# m_t1 <- glm(cbind(n,Tot) ~ year * Geography, data = t1, 
#             family = "binomial")
# summary(m_t1)

# Summary
# for (i in 1:nlevels(factor(t1$Method))) {
#   
#   message(paste("::::::  ",levels(factor(t1$Method))[i],"  :::::"))
#   print(parameters::model_parameters(model[[i]]))   
#   message(paste(":::::::::::"))
#   
# }  

y2 <- seq(from = min(t1$year), to = max(t1$year), 1) #temporal series of interest

(Plot_trend1 <- ggplot() +
    ylab("Relative proportion of studies") + xlab(NULL) +
    #trend lines
    geom_line(aes(y = logisticline(y2,model[[1]]), x = y2), colour = COL[1],linetype="solid",size=1.1,alpha=1)+
    geom_line(aes(y = logisticline(y2,model[[2]]), x = y2), colour = COL[2],linetype="solid",size=1.1,alpha=1)+
    geom_line(aes(y = logisticline(y2,model[[3]]), x = y2), colour = COL[3],linetype="solid",size=1.1,alpha=1)+
    geom_line(aes(y = logisticline(y2,model[[4]]), x = y2), colour = COL[4],linetype="solid",size=1.1,alpha=1)+
    geom_line(aes(y = logisticline(y2,model[[5]]), x = y2), colour = COL[5],linetype="solid",size=1.1,alpha=1)+
    #confidence intervals
    geom_ribbon(aes(ymax = logisticline_max(y2, model[[01]]),
                    ymin = logisticline_min(y2, model[[01]]),x = y2),alpha = 0.5,fill=COL[1])+
    geom_ribbon(aes(ymax = logisticline_max(y2, model[[02]]),
                    ymin = logisticline_min(y2, model[[02]]),x = y2),alpha = 0.5,fill=COL[2])+
    geom_ribbon(aes(ymax = logisticline_max(y2, model[[03]]),
                    ymin = logisticline_min(y2, model[[03]]),x = y2),alpha = 0.5,fill=COL[3])+
    geom_ribbon(aes(ymax = logisticline_max(y2, model[[04]]),
                    ymin = logisticline_min(y2, model[[04]]),x = y2),alpha = 0.5,fill=COL[4])+
    geom_ribbon(aes(ymax = logisticline_max(y2, model[[05]]),
                    ymin = logisticline_min(y2, model[[05]]),x = y2),alpha = 0.5, fill=COL[5])+
   
    #Text
    annotate(geom="text", hjust = 0,vjust = 0.3,
             x= 2020.5, y= logisticline_max(y2, model[[01]])[21], 
             label = levels(factor(t1$Method))[1],
             color=COL[1],alpha=1)+
    
    annotate(geom="text", hjust = 0,vjust = 0,
             x= 2020.5, y= logisticline_max(y2, model[[02]])[21], 
             label = levels(factor(t1$Method))[2],
             color=COL[2],alpha=1)+
    
    annotate(geom="text", hjust = 0,vjust = 0,
             x= 2020.5, y= logisticline_max(y2, model[[03]])[21], 
             label = levels(factor(t1$Method))[3],
             color=COL[3],alpha=1)+
    
    annotate(geom="text", hjust = 0,vjust = 0,
             x= 2020.5, y= logisticline_max(y2, model[[04]])[21], 
             label = levels(factor(t1$Method))[4],
             color=COL[4],alpha=1)+
    
    annotate(geom="text", hjust = 0,vjust = 0,
             x= 2020.5, y= logisticline_max(y2, model[[05]])[21], 
             label = levels(factor(t1$Method))[5],
             color=COL[5])+
     
    coord_cartesian(xlim = c(2000, 2020), # This focuses the x-axis on the range of interest
                    clip = 'off') +   # This keeps the labels from disappearing
    
    theme_classic() + theme(plot.margin = unit(c(0.5,4,0.5,0.5), 'cm'))
)

################

t2 <- semi_colon_splitter(input1 = db$Geography,
                          input2 = db$Publication_year, 
                          names = c("Geography","year"))

t2_prop <- t2  %>% group_by(year) %>% count(Geography)
t2_tot <- data.frame(table(t2$year)) ; colnames(t2_tot) <- c("year", "Tot")

t2 <- data.frame(dplyr::left_join(t2_prop,t2_tot, by = "year"))

rm(t2_prop,t2_tot) #cleanù

t2$year <- as.numeric(as.character(t2$year))

# Modelling the temporal trends
model   <- list()
par     <- list()

for (i in levels(factor(t2$Geography))) {
  
  db_i <- t2[t2$Geography==i, ]
  model[[i]]   <- glm(cbind(n,Tot) ~ year, data = db_i, family = "binomial")
  par[[i]]     <- parameters::model_parameters(model[[i]])
  
}  

# m_t2 <- glm(cbind(n,Tot) ~ year * Geography, data = t2, 
#             family = "binomial")
# summary(m_t2)

# Summary
# for (i in 1:nlevels(factor(t2$Geography))) {
# 
#   message(paste("::::::  ",levels(factor(t2$Geography))[i],"  :::::"))
#   print(parameters::model_parameters(model[[i]]))
#   message(paste(":::::::::::"))
# 
# }

y2 <- seq(from = min(t2$year), to = max(t2$year), 1) #temporal series of interest

(Plot_trend2 <- ggplot() +
    ylab("Relative proportion of studies") + xlab(NULL)+ #ylim(0,0.3)+
    #trend lines
    geom_line(aes(y = logisticline(y2,model[[1]]), x = y2), colour = COL[1],linetype="solid",size=1.1,alpha=1)+
    geom_line(aes(y = logisticline(y2,model[[2]]), x = y2), colour = COL[2],linetype="solid",size=1.1,alpha=1)+
    geom_line(aes(y = logisticline(y2,model[[3]]), x = y2), colour = COL[3],linetype="solid",size=1.1,alpha=1)+
    geom_line(aes(y = logisticline(y2,model[[4]]), x = y2), colour = COL[4],linetype="solid",size=1.1,alpha=1)+
    geom_line(aes(y = logisticline(y2,model[[5]]), x = y2), colour = COL[5],linetype="solid",size=1.1,alpha=1)+
    geom_line(aes(y = logisticline(y2,model[[6]]), x = y2), colour = COL[6],linetype="solid",size=1.1,alpha=1)+
    geom_line(aes(y = logisticline(y2,model[[7]]), x = y2), colour = COL[7],linetype="solid",size=1.1,alpha=1)+
    geom_line(aes(y = logisticline(y2,model[[8]]), x = y2), colour = COL[8],linetype="solid",size=1.1,alpha=1)+
    #confidence intervals
    geom_ribbon(aes(ymax = logisticline_max(y2, model[[01]]),
                    ymin = logisticline_min(y2, model[[01]]),x = y2),alpha = 0.5,fill=COL[1])+
    geom_ribbon(aes(ymax = logisticline_max(y2, model[[02]]),
                    ymin = logisticline_min(y2, model[[02]]),x = y2),alpha = 0.5,fill=COL[2])+
    geom_ribbon(aes(ymax = logisticline_max(y2, model[[03]]),
                    ymin = logisticline_min(y2, model[[03]]),x = y2),alpha = 0.5,fill=COL[3])+
    geom_ribbon(aes(ymax = logisticline_max(y2, model[[04]]),
                    ymin = logisticline_min(y2, model[[04]]),x = y2),alpha = 0.5,fill=COL[4])+
    geom_ribbon(aes(ymax = logisticline_max(y2, model[[05]]),
                    ymin = logisticline_min(y2, model[[05]]),x = y2),alpha = 0.5, fill=COL[5])+
    geom_ribbon(aes(ymax = logisticline_max(y2, model[[06]]),
                    ymin = logisticline_min(y2, model[[06]]),x = y2),alpha = 0.5, fill=COL[6])+
    geom_ribbon(aes(ymax = logisticline_max(y2, model[[07]]),
                    ymin = logisticline_min(y2, model[[07]]),x = y2),alpha = 0.5, fill=COL[7])+
    geom_ribbon(aes(ymax = logisticline_max(y2, model[[08]]),
                    ymin = logisticline_min(y2, model[[08]]),x = y2),alpha = 0.5, fill=COL[8])+
    #Text
    annotate(geom="text", hjust = 0,vjust = 0.3,
             x= 2020.5, y= logisticline_max(y2, model[[01]])[21], 
             label = levels(factor(t2$Geography))[1],
             color=COL[1],alpha=1)+
    
    annotate(geom="text", hjust = 0,vjust = 0,
             x= 2020.5, y= logisticline_max(y2, model[[02]])[21], 
             label = levels(factor(t2$Geography))[2],
             color=COL[2],alpha=1)+
    
    annotate(geom="text", hjust = 0,vjust = 0,
             x= 2020.5, y= logisticline_max(y2, model[[03]])[21], 
             label = levels(factor(t2$Geography))[3],
             color=COL[3],alpha=1)+
    
    annotate(geom="text", hjust = 0,vjust = 0,
             x= 2020.5, y= logisticline_max(y2, model[[04]])[21], 
             label = levels(factor(t2$Geography))[4],
             color=COL[4],alpha=1)+
    
    annotate(geom="text", hjust = 0,vjust = 0,
             x= 2020.5, y= logisticline_max(y2, model[[05]])[21], 
             label = levels(factor(t2$Geography))[5],
             color=COL[5])+
    
    annotate(geom="text", hjust = 0,vjust = 0,
             x= 2020.5, y= logisticline_max(y2, model[[06]])[21], 
             label = levels(factor(t2$Geography))[6],
             color=COL[6])+
    
    annotate(geom="text", hjust = 0,vjust = 0,
             x= 2020.5, y= logisticline_max(y2, model[[07]])[21], 
             label = levels(factor(t2$Geography))[7],
             color=COL[7])+
    
    annotate(geom="text", hjust = 0,vjust = 0,
             x= 2020.5, y= logisticline_max(y2, model[[08]])[21], 
             label = levels(factor(t2$Geography))[8],
             color=COL[8])+
    
    coord_cartesian(xlim = c(2000, 2020), # This focuses the x-axis on the range of interest
                    clip = 'off') +   # This keeps the labels from disappearing
    
    theme_classic() + theme(plot.margin = unit(c(0.5,4,0.5,0.5), 'cm'))
)

################

t3_prop <- db  %>% group_by(Publication_year) %>% 
           summarize(Taxonomic_div = sum(Taxonomic_div,na.rm = T ),
                     Phylogenetic_div = sum(Phylogenetic_div,na.rm = T),
                     Functional_div = sum(Functional_div,na.rm = T),
                     Other_div = sum(Other_div,na.rm = T))
                     
t3 <- data.frame(t3_prop, Tot = rowSums(t3_prop[,2:5])) 
colnames(t3)[1] <- "year"
  
# Modelling the temporal trends
model   <- list()

model[[1]]   <- glm(cbind(Taxonomic_div,Tot) ~ year, data = t3, family = "binomial")
model[[2]]   <- glm(cbind(Phylogenetic_div,Tot) ~ year, data = t3, family = "binomial")
model[[3]]   <- glm(cbind(Functional_div,Tot) ~ year, data = t3, family = "binomial")
model[[4]]   <- glm(cbind(Other_div,Tot) ~ year, data = t3, family = "binomial")

y2 <- seq(from = min(t3$year), to = max(t3$year), 1) #temporal series of interest

(Plot_trend3 <- ggplot() +
    ylab("Relative proportion of studies") + xlab(NULL)+ #ylim(0,0.3)+
    #trend lines
    geom_line(aes(y = logisticline(y2,model[[1]]), x = y2), colour = COL[1],linetype="solid",size=1.1,alpha=1)+
    geom_line(aes(y = logisticline(y2,model[[2]]), x = y2), colour = COL[2],linetype="solid",size=1.1,alpha=1)+
    geom_line(aes(y = logisticline(y2,model[[3]]), x = y2), colour = COL[3],linetype="solid",size=1.1,alpha=1)+
    geom_line(aes(y = logisticline(y2,model[[4]]), x = y2), colour = COL[4],linetype="solid",size=1.1,alpha=1)+
    #confidence intervals
    geom_ribbon(aes(ymax = logisticline_max(y2, model[[01]]),
                    ymin = logisticline_min(y2, model[[01]]),x = y2),alpha = 0.5,fill=COL[1])+
    geom_ribbon(aes(ymax = logisticline_max(y2, model[[02]]),
                    ymin = logisticline_min(y2, model[[02]]),x = y2),alpha = 0.5,fill=COL[2])+
    geom_ribbon(aes(ymax = logisticline_max(y2, model[[03]]),
                    ymin = logisticline_min(y2, model[[03]]),x = y2),alpha = 0.5,fill=COL[3])+
    geom_ribbon(aes(ymax = logisticline_max(y2, model[[04]]),
                    ymin = logisticline_min(y2, model[[04]]),x = y2),alpha = 0.5,fill=COL[4])+
    #Text
    annotate(geom="text", hjust = 0,vjust = 0.3,
             x= 2020.5, y= logisticline_max(y2, model[[01]])[21], 
             label = "Taxonomic diversity",
             color=COL[1],alpha=1)+
    
    annotate(geom="text", hjust = 0,vjust = 0,
             x= 2020.5, y= logisticline_max(y2, model[[02]])[21]-0.03, 
             label = "Phylogenetic diversity",
             color=COL[2],alpha=1)+
    
    annotate(geom="text", hjust = 0,vjust = 0,
             x= 2020.5, y= logisticline_max(y2, model[[03]])[21], 
             label = "Functional diversity",
             color=COL[3],alpha=1)+
    
    annotate(geom="text", hjust = 0,vjust = 0,
             x= 2020.5, y= logisticline_max(y2, model[[04]])[21], 
             label = "Other diversity",
             color=COL[4],alpha=1)+
    
    coord_cartesian(xlim = c(2000, 2020), # This focuses the x-axis on the range of interest
                    clip = 'off') +   # This keeps the labels from disappearing
    
    theme_classic() + theme(plot.margin = unit(c(0.5,4,0.5,0.5), 'cm'))
)

# Regression model -------------------------------------------------------

colnames(db)

# Subset
db_glm <- db %>% select(year = Publication_year,
                        n_aut,
                        cit = tot_cites,
                        Method = Method_data_collection,
                        Taxonomic_div, Phylogenetic_div, Functional_div,
                        Title_geo,
                        Title_hab,
                        Title_taxon,
                        Biodiversity_prop,
                        Geography,
                        Domain)

# Converting multiples
method_split <- strsplit(as.character(db_glm$Method), ";")

method <- c()
for(i in 1:length(method_split))
  method <- c(method, ifelse(length(method_split[[i]]) > 1, "Multiple", method_split[[i]]) )

geography_split <- strsplit(as.character(db_glm$Geography), ";")

geography <- c()
for(i in 1:length(geography_split))
  geography <- c(geography, ifelse(length(geography_split[[i]]) > 1, "Global", geography_split[[i]]) )

domain_split <- strsplit(as.character(db_glm$Domain), ";")

domain <- c()
for(i in 1:length(domain_split))
  domain <- c(domain, ifelse(length(domain_split[[i]]) > 1, "Multiple", domain_split[[i]]) )

db_glm$Method    <- method
db_glm$Geography <- geography
db_glm$Domain    <- domain

db_glm <- db_glm %>% mutate_at(vars("Method","Geography","Domain",
                                    "Taxonomic_div","Phylogenetic_div","Functional_div",
                                    "Title_geo","Title_hab","Title_taxon"), as_factor)

str(db_glm)

rm(method_split,method,geography,geography_split,domain,domain_split) #clean

# Correcting citation by year (NOTE:: to do better with gam)
db_glm$cit <- db_glm$cit / db_glm$year

# Dependent var
db_glm$prop  <- rowSums(db[,36:90])
db_glm$total <- length(36:90)

#Set baseline
db_glm <- within(db_glm, Geography <- relevel(Geography, ref = "Global"))
db_glm <- within(db_glm, Domain    <- relevel(Domain, ref = "Multiple"))

# Fitting the model
m1  <- glm(cbind(prop,total) ~ year + n_aut + cit  + Domain + Geography + Taxonomic_div + Phylogenetic_div + Functional_div, 
           data = db_glm, family = "binomial")

performance::check_model(m1)
performance::check_overdispersion(m1)
performance::check_collinearity(m1)

cor(db_glm$n_aut,db_glm$cit)

str(db_glm)

db_glm %>% ggplot(aes(x=Geography , y = n_aut)) + geom_boxplot() + theme_classic()

# drop n_aut
m2  <- glm(cbind(prop,total) ~ year + cit + Domain + Geography + Taxonomic_div + Phylogenetic_div + Functional_div, 
           data = db_glm, family = "binomial")

performance::check_collinearity(m2)
performance::check_model(m2)
performance::check_overdispersion(m2)

sjPlot::plot_model(m2, title ="Factors correlating with biodiversity proportion",
                   sort.est = TRUE,  vline.color = "grey80",
                   show.values = TRUE, value.offset = .3, se = TRUE, show.p = TRUE) + theme_classic()


parameters::model_parameters(m2)
MuMIn::r.squaredLR(m2)[[1]]

# quasibinomial?
m3  <- glm(cbind(prop,total) ~ year + cit + Domain + Geography + Taxonomic_div + Phylogenetic_div + Functional_div, data = db_glm, family = "quasibinomial")

performance::check_collinearity(m3)
performance::check_model(m3)

colnames(db_glm)


m2  <- glm(cbind(prop,total) ~ year + cit + Domain + Geography + Method + Taxonomic_div + Phylogenetic_div + Functional_div, 
           data = db_glm, family = "binomial")

summary(m2)

# m2bis  <- glm(cbind(prop,total) ~ year + cit + Domain + as.factor(Title_geo) + as.factor(Title_taxon) + as.factor(Title_hab), data = db_glm, family = "binomial")
# 
# performance::check_collinearity(m2bis)
# performance::check_model(m2bis)
# 
# sjPlot::plot_model(m2bis, title ="Factors correlating with biodiversity proportion",
#                    sort.est = TRUE,  vline.color = "grey60",
#                    show.values = TRUE, value.offset = .3, se = TRUE, show.p = FALSE) + theme_classic()

# Wordcloud ---------------------------------------------------------------

db_full <- read.csv(file = "BIODIVERSITY_V3.csv",sep='\t', dec='.',header=TRUE,as.is=FALSE)

# A list of boring and non-useful words, bundled with `tidytext`
data(stop_words)

# Count words
Title <- db_full %>%
  mutate(title = as.character(title)) %>%
  unnest_tokens(output = title_word,
                input = title) %>%
  anti_join(stop_words, by = c("title_word" = "word")) %>%
  count(title_word, sort = TRUE) 

# Plot
dev.off()
Title[2:100,] %>% with(wordcloud(words = title_word, 
                                         freq = n, 
                                         max.words = 200,
                                         scale=c(4,.2),
                                         random.color=TRUE, color = c("orange","aquamarine3","aquamarine4","darkblue","black")))

#end