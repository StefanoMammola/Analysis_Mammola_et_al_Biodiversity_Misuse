pub      <- download_1$publication
aut      <- download_1$author
aff      <- download_1$address
key      <- download_1$keyword
key1     <- download_1$keywords_plus
WC_cat   <- download_1$jsc
doc_type <- download_1$doc_type
authors        <- c()
n_aut          <- c()
authors_id     <- c()
author_country <- c()
keywords       <- c()
keywords_plus  <- c()
WC_category    <- c()
type           <- c()
for (i in 1:nrow(pub)){
#extracting the id
id <- pub[i,]$ut
#storing authors
aut_i <- aut[aut$ut == id,]
authors <- c(authors, paste(aut_i$display_name, collapse =" ; "))
n_aut   <- append(n_aut, nrow(aut_i))
authors_id <- c(authors_id, paste(aut_i$daisng_id, collapse = " ; "))
#store affiliation
aff_i <- aff[aff$ut == id,]
author_country <- c(author_country, paste(aff_i$country, collapse = " ; "))
#keywords
key_i <- key[key$ut == id,]
keywords <- c(keywords, paste(key_i$keyword, collapse = " ; "))
}
final_db <- data.frame(pub,
authors,
n_aut,
authors_id,
author_country,
keywords,
year = format(as.POSIXct(pub$date, format = "%m/%d/%Y"), format = "%Y"))
xlsx::write.xlsx(final_db, "Test_cave_biology.xlsx")
write.table(final_db, "Test_cave_biology.csv")
write.table(final_db, "/Users/stefanomammola/Desktop/BIG_IDEAS BATS/Abstract/Test_cave_biology.csv", sep = "\t")
colnames(final_db)
View(final_db)
write.table(final_db, "/Users/stefanomammola/Desktop/BIG_IDEAS BATS/Abstract/Test_cave_biology.csv", sep = "\t")
(n_tot <- query_wos((query), editions = coll, sid = sid))
rm(list = ls())
# Loading R package -------------------------------------------------------
library("Amelia")
library("dplyr")
library("gam")
library("ggplot2")
library("MuMIn")
library("parameters")
library("performance")
library("sjPlot")
library("psych")
library("PupillometryR")
library("tidyr")
library("tidytext")
library("tidyverse")
library("wordcloud")
library("RColorBrewer")
# Source functions and plot parameters ------------------------------------
source("Script/Functions.R")
# Loading database --------------------------------------------------------
db <- read.csv(file = "Data/Database_Full_study.csv", sep = '\t', dec='.', header = TRUE, as.is = FALSE)
str(db)
dim(db)
# Selecting paper to analyse
db <- db %>% filter(Analysis == "yes") ; db <- droplevels(db)
levels(db$Geography)
levels(db$Domain)
levels(db$Method_data_collection)
# Calculating proportion of biodiversity
db$Biodiversity_prop <- rowSums(db[,36:91]) / length(36:91)
db$Animals_prop      <- rowSums(db[,c(36:70,89)]) / length(c(36:70,89))
db$Plants_prop       <- rowSums(db[,c(71:75,90)]) / length(c(71:75,90))
db$Fungi_prop        <- rowSums(db[,c(76:84,91)]) / length(c(76:84,91))
db$Micro_prop        <- rowSums(db[,c(85:88)])    / length(c(85:88))
#Title fanciness
db$Title_fanciness <- rowSums(db[,c(23,24)])
table(db$Title_fanciness) #too few obs
# Calculating total number of specifics to the title
db$Title_adjecties <- as.factor(rowSums(db[,27:29]))
table(db$Title_adjecties)
# Number of biodiversity facets
db$Facets_biodiversity <- as.factor(rowSums(db[,31:34]))
table(db$Facets_biodiversity)
# Missing data
Amelia::missmap(db)
# Chcking NÂ° of coutnris in the reference list
db$author_country <- as.character(db$author_country)
country_diversity <- c()
for(i in 1:nrow(db)){
diversity_i <- strsplit(db[i,]$author_country, split = ";")[[1]]
diversity_i <- trimws(diversity_i, which = c("both"))
diversity_i <- unique(diversity_i)
country_diversity <- append(country_diversity, length(diversity_i))}
db <- cbind(db,country_diversity)
###########################
# Data preparation part 2 #
###########################
# Correcting citations by year of publication ----------------------
# What is the trend of citation over time?
db %>% ggplot(aes(x = Publication_year, y = tot_cites)) +
geom_point(size = 1, alpha = 0.7, color = "grey40")+
labs(x = "year of publication", y = "citation")+
theme_custom()
# Modeling temporal trend
M0 <- gam::gam(tot_cites ~ s(Publication_year), family = poisson, data = db) #constraining dof to 2 so that you don't get negative predicted citations
summary(M0)
par(mar= c(rep(2,4)))
plot(M0, se = TRUE)
# Taking the residual of citations
db <- data.frame(db, citation_residuals = resid(M0, type="pearson"))
# Checking how good it predict by comparing with a simple normalization by year of publication
db %>%  ggplot(aes(x = tot_cites/Publication_year, y = citation_residuals)) + #normalize by year
geom_point(size = 1, alpha = 0.7, color = "grey40")+
labs(x = "citation / year", y = "citation residuals")+
theme_custom()
# Correcting altmetrics by year of publication ----------------------------
db_alt <- db %>% select(year = Publication_year,
Altmetrics = Altmetrics,
row_ID) %>% na.omit
db_alt %>% ggplot(aes(x = year, y = Altmetrics)) +
geom_point(size = 1, alpha = 0.7, color = "grey40")+
labs(x = "year of publication", y = "altmetric score")+
theme_custom()
M1 <- gam::gam(Altmetrics ~ s(year), family = poisson, data = db_alt) #constraining dof to 2 so that you don't get negative predicted citations
summary(M1)
plot(M1, se = TRUE)
# Taking the residual of citations & merge with the original db
db_alt <- data.frame(db_alt, Altmetrics_residuals = resid(M1,type="pearson")) # Taking the residual of citations
db_alt <- db_alt %>% select(row_ID,Altmetrics_residuals)
db <- db %>% dplyr::left_join(db_alt, by = "row_ID") ; rm(db_alt, M0, M1)
# Uploading the database with all Impact factors between 1997 and 2020 (from Clarivate analytics Journal Citation report)
my_files   <- paste("Data/IF/", list.files("Data/IF/"), sep = '')
all_IF     <- lapply(my_files, read.csv, header = TRUE, sep = ",")
# Reading thhem manually:
all_IF[[23]] <- read.csv(file = my_files[23], header = TRUE, sep = "\t")
# watch out that 2019 and 2020 are new the new WSC format!!
str(all_IF[[23]])  #Wrong!
all_IF[[24]] <- read.csv(file = my_files[24], header = TRUE, sep = "\t")
str(all_IF[[23]]) #ok!
str(all_IF[[24]]) #ok!
# Generating a database list all journal and their impact factor for each year
my_IF <- list() ; year_IF <- 1997:2020
for (k in 1 : length(all_IF)){
if (k < 23) {
df <- all_IF[[k]]
df <- df[,c(2,4)]
colnames(df) <- c("journal", "IF")
df[df == "Not Available"] <- "NA"
df$IF         <- as.numeric(as.character(df$IF))
df$journal    <- sapply(df$journal, word.cleaner, remove.punctuation = TRUE) #simplify journal string
df$journal    <- paste(df$journal, rep(year_IF[[k]],nrow(df)),sep='') #paste journal and year
df <- df %>% distinct()
my_IF[[k]] <- df
} else {
df <- all_IF[[k]]
colnames(df) <- c("journal", "IF")
df[df == "Not Available"] <- "NA"
df$IF         <- as.numeric(as.character(df$IF))
df$journal    <- as.character(df$journal)
df$journal    <- sapply(df$journal, word.cleaner, remove.punctuation = TRUE) #simplify journal string
df$journal    <- paste(df$journal, rep(year_IF[[k]],nrow(df)),sep='') #paste journal and year
df <- df %>% distinct()
my_IF[[k]] <- df
}
}
colnames(IF_1997_2020)[1] <- "JI_PY"
db$JI_PY <- paste(word.cleaner(db$journal,remove.punctuation = TRUE), db$Publication_year,sep='')
db <- db %>% dplyr::left_join(IF_1997_2020, by = "JI_PY")
rm(my_files,all_IF,my_IF,df,IF_1997_2020,k) #cleaning
# Removing study with no Biodiversity
db2 <- db %>% filter(Biodiversity_prop > 0)
method <- c()
for(i in 1:length(method_split))
method <- c(method, ifelse(length(method_split[[i]]) > 1, "Multiple", method_split[[i]]) )
geography_split <- strsplit(as.character(db2$Geography), ";")
geography <- c()
for(i in 1:length(geography_split))
geography <- c(geography, ifelse(length(geography_split[[i]]) > 1, "Global", geography_split[[i]]) )
domain_split <- strsplit(as.character(db2$Domain), ";")
domain <- c()
for(i in 1:length(domain_split))
domain <- c(domain, ifelse(length(domain_split[[i]]) > 1, "Multiple", domain_split[[i]]) )
db2$Method    <- method
db2$Geography <- geography
db2$Domain    <- domain
db2 <- db2 %>% mutate_at(vars("Method","Geography","Domain","Title_geo","Title_hab","Title_taxon"), as_factor)
# Unlist the list at last
IF_1997_2020 <- do.call("rbind", my_IF)
# How many studies have no biodiversity proportion?
nrow(db[db$Biodiversity_prop == 0,])/nrow(db) * 100 #22.1% do not consider any biodiversity group
# Converting multiples levels in factors
method_split <- strsplit(as.character(db2$Method_data_collection), ";")
# Set baseline
db2 <- within(db2, Geography <- relevel(Geography, ref = "Global"))
db2 <- within(db2, Domain    <- relevel(Domain,    ref = "Multiple"))
db2 <- within(db2, Method    <- relevel(Method,    ref = "Multiple"))
# Unlist the list at last
IF_1997_2020 <- do.call("rbind", my_IF)
for (k in 1 : length(all_IF)){
if (k < 23) {
df <- all_IF[[k]]
df <- df[,c(2,4)]
colnames(df) <- c("journal", "IF")
df[df == "Not Available"] <- "NA"
df$IF         <- as.numeric(as.character(df$IF))
df$journal    <- sapply(df$journal, word.cleaner, remove.punctuation = TRUE) #simplify journal string
df$journal    <- paste(df$journal, rep(year_IF[[k]],nrow(df)),sep='') #paste journal and year
df <- df %>% distinct()
my_IF[[k]] <- df
} else {
df <- all_IF[[k]]
colnames(df) <- c("journal", "IF")
df[df == "Not Available"] <- "NA"
df$IF         <- as.numeric(as.character(df$IF))
df$journal    <- as.character(df$journal)
df$journal    <- sapply(df$journal, word.cleaner, remove.punctuation = TRUE) #simplify journal string
df$journal    <- paste(df$journal, rep(year_IF[[k]],nrow(df)),sep='') #paste journal and year
df <- df %>% distinct()
my_IF[[k]] <- df
}
}
# Uploading the database with all Impact factors between 1997 and 2020 (from Clarivate analytics Journal Citation report)
my_files   <- paste("Data/IF/", list.files("Data/IF/"), sep = '')
all_IF     <- lapply(my_files, read.csv, header = TRUE, sep = ",")
# watch out that 2019 and 2020 are new the new WSC format!!
str(all_IF[[23]])  #Wrong!
# Reading thhem manually:
all_IF[[23]] <- read.csv(file = my_files[23], header = TRUE, sep = "\t")
all_IF[[24]] <- read.csv(file = my_files[24], header = TRUE, sep = "\t")
str(all_IF[[23]]) #ok!
str(all_IF[[24]]) #ok!
# Generating a database list all journal and their impact factor for each year
my_IF <- list() ; year_IF <- 1997:2020
for (k in 1 : length(all_IF)){
if (k < 23) {
df <- all_IF[[k]]
df <- df[,c(2,4)]
colnames(df) <- c("journal", "IF")
df[df == "Not Available"] <- "NA"
df$IF         <- as.numeric(as.character(df$IF))
df$journal    <- sapply(df$journal, word.cleaner, remove.punctuation = TRUE) #simplify journal string
df$journal    <- paste(df$journal, rep(year_IF[[k]],nrow(df)),sep='') #paste journal and year
df <- df %>% distinct()
my_IF[[k]] <- df
} else {
df <- all_IF[[k]]
colnames(df) <- c("journal", "IF")
df[df == "Not Available"] <- "NA"
df$IF         <- as.numeric(as.character(df$IF))
df$journal    <- as.character(df$journal)
df$journal    <- sapply(df$journal, word.cleaner, remove.punctuation = TRUE) #simplify journal string
df$journal    <- paste(df$journal, rep(year_IF[[k]],nrow(df)),sep='') #paste journal and year
df <- df %>% distinct()
my_IF[[k]] <- df
}
}
# Unlist the list at last
IF_1997_2020 <- do.call("rbind", my_IF)
colnames(IF_1997_2020)[1] <- "JI_PY"
db$JI_PY <- paste(word.cleaner(db$journal,remove.punctuation = TRUE), db$Publication_year,sep='')
db <- db %>% dplyr::left_join(IF_1997_2020, by = "JI_PY")
rm(my_files,all_IF,my_IF,df,IF_1997_2020,k) #cleaning
# How many studies have no biodiversity proportion?
nrow(db[db$Biodiversity_prop == 0,])/nrow(db) * 100 #22.1% do not consider any biodiversity group
# Removing study with no Biodiversity
db2 <- db %>% filter(Biodiversity_prop > 0)
# Converting multiples levels in factors
method_split <- strsplit(as.character(db2$Method_data_collection), ";")
method <- c()
for(i in 1:length(method_split))
method <- c(method, ifelse(length(method_split[[i]]) > 1, "Multiple", method_split[[i]]) )
geography_split <- strsplit(as.character(db2$Geography), ";")
geography <- c()
for(i in 1:length(geography_split))
geography <- c(geography, ifelse(length(geography_split[[i]]) > 1, "Global", geography_split[[i]]) )
domain_split <- strsplit(as.character(db2$Domain), ";")
domain <- c()
for(i in 1:length(domain_split))
domain <- c(domain, ifelse(length(domain_split[[i]]) > 1, "Multiple", domain_split[[i]]) )
db2$Method    <- method
db2$Geography <- geography
db2$Domain    <- domain
db2 <- db2 %>% mutate_at(vars("Method","Geography","Domain","Title_geo","Title_hab","Title_taxon"), as_factor)
# Set baseline
db2 <- within(db2, Geography <- relevel(Geography, ref = "Global"))
db2 <- within(db2, Domain    <- relevel(Domain,    ref = "Multiple"))
db2 <- within(db2, Method    <- relevel(Method,    ref = "Multiple"))
#clean
rm(method_split, method, geography, geography_split, domain, domain_split, i)
# Biodiversity facets (%)
round((table(db2$Facets_biodiversity)/sum(table(db2$Facets_biodiversity)))*100,2)
table(db2$Phylogenetic_div)
table(db2$Functional_div)
table(db2$Taxonomic_div)
table(db2$Other_div)
#What proportion of biodiversity across studies?
mean(db2$Biodiversity_prop, na.rm = TRUE)*100 #mean
std(db2$Biodiversity_prop)*100 #sW
range(db2$Biodiversity_prop, na.rm = TRUE)*100 #range
getmode(db2$Biodiversity_prop)*100 #mode
Percentile <- ifelse(db2$Biodiversity_prop > quantile(db2$Biodiversity_prop, c(.75)),"75â100 percentile","0â75 percentile")
model_1 <- glm(Biodiversity_prop ~ Publication_year, data = db2[Percentile == "0â75 percentile", ], family = quasibinomial(link = "logit"))
model_2 <- glm(Biodiversity_prop ~ Publication_year, data = db2[Percentile == "75â100 percentile", ], family = quasibinomial(link = "logit"))
lablel_custom = c(expression(paste("0-75"^{"th"})),
expression(paste("75-100"^{"th"})))
summary(model_1)
summary(model_2)
Col_custom <- c(rev(RColorBrewer::brewer.pal(5, "Blues"))[1], "orange")
(plot1a <- ggplot(data = db2, aes(x = Publication_year, y = Biodiversity_prop)) +
geom_point(aes(fill = Percentile, col = Percentile), size = 3, shape = 21, alpha = 0.25) +
geom_smooth(aes(col = Percentile, fill = Percentile), method = "glm", formula = y ~ x,
method.args = list(family = quasibinomial(link = "logit"))) +
scale_color_manual(labels = lablel_custom, values = Col_lines)+
scale_fill_manual(labels = lablel_custom, values = Col_lines)+
labs(x = NULL, y = Y.label)+
theme_custom()+ theme(legend.position = c(0.25, 0.85),
legend.text.align = 0,
legend.title = element_text(size = 12)))
# Checking distribution by region, method and system
(plot1b <- db2 %>%
drop_na(Geography,Biodiversity_prop) %>%
#filter(Biodiversity_prop < 0.4) %>%  #removing 1 outlier
ggplot(aes(x = Geography, y = Biodiversity_prop)) +
geom_flat_violin(position = position_nudge(x = 0.2, y = 0),
alpha = 1, fill = RColorBrewer::brewer.pal(5, "Blues")[5], col = "white", adjust = 1.5) +
geom_point(position = position_jitter(width = 0.15), size = 1, alpha = 0.7, color = RColorBrewer::brewer.pal(5, "Blues")[3]) +
geom_boxplot(width = 0.2,  col = RColorBrewer::brewer.pal(5, "Blues")[5], outlier.shape = NA, alpha = 0) +
labs(y = Y.label, x = NULL) +
theme_custom() + theme(axis.text.y = element_text(size = 15)) + coord_flip())
(plot1c <- db2 %>%
drop_na(Domain,Biodiversity_prop) %>%
ggplot(aes(x = Domain, y = Biodiversity_prop)) +
geom_flat_violin(position = position_nudge(x = 0.2, y = 0),
alpha = 1, fill= RColorBrewer::brewer.pal(5, "Blues")[5], col = "white", adjust = 1.5) +
geom_point(position = position_jitter(width = 0.15), size = 1, alpha = 0.7, color = RColorBrewer::brewer.pal(5, "Blues")[3]) +
geom_boxplot(width = 0.2, col = RColorBrewer::brewer.pal(5, "Blues")[5], outlier.shape = NA, alpha = 0) +
labs(y = Y.label, x = NULL) +
theme_custom() + theme(axis.text.y = element_text(size = 15)) + coord_flip())
# Checking distribution by region, method and system
(plot1b <- db2 %>%
drop_na(Geography,Biodiversity_prop) %>%
#filter(Biodiversity_prop < 0.4) %>%  #removing 1 outlier
ggplot(aes(x = Geography, y = Biodiversity_prop)) +
geom_flat_violin(position = position_nudge(x = 0.2, y = 0),
alpha = 1, fill = RColorBrewer::brewer.pal(5, "Blues")[5], col = "white", adjust = 1.5) +
geom_point(position = position_jitter(width = 0.15), size = 1, alpha = 0.7, color = RColorBrewer::brewer.pal(5, "Blues")[3]) +
geom_boxplot(width = 0.2,  col = RColorBrewer::brewer.pal(5, "Blues")[5], outlier.shape = NA, alpha = 0) +
labs(y = Y.label, x = NULL) +
theme_custom() + theme(axis.text.y = element_text(size = 15)) + coord_flip())
Col_custom <- c(rev(RColorBrewer::brewer.pal(5, "Blues"))[1], "orange")
Col_custom <- c(rev(RColorBrewer::brewer.pal(5, "Blues"))[1], "orange")
(plot1a <- ggplot(data = db2, aes(x = Publication_year, y = Biodiversity_prop)) +
geom_point(aes(fill = Percentile, col = Percentile), size = 3, shape = 21, alpha = 0.25) +
geom_smooth(aes(col = Percentile, fill = Percentile), method = "glm", formula = y ~ x,
method.args = list(family = quasibinomial(link = "logit"))) +
scale_color_manual(labels = lablel_custom, values = Col_custom)+
scale_fill_manual(labels = lablel_custom, values = Col_custom)+
labs(x = NULL, y = Y.label)+
theme_custom()+ theme(legend.position = c(0.25, 0.85),
legend.text.align = 0,
legend.title = element_text(size = 12)))
# Checking distribution by region, method and system
(plot1b <- db2 %>%
drop_na(Geography,Biodiversity_prop) %>%
#filter(Biodiversity_prop < 0.4) %>%  #removing 1 outlier
ggplot(aes(x = Geography, y = Biodiversity_prop)) +
geom_flat_violin(position = position_nudge(x = 0.2, y = 0),
alpha = 1, fill = RColorBrewer::brewer.pal(5, "Blues")[5], col = "white", adjust = 1.5) +
geom_point(position = position_jitter(width = 0.15), size = 1, alpha = 0.7, color = RColorBrewer::brewer.pal(5, "Blues")[3]) +
geom_boxplot(width = 0.2,  col = RColorBrewer::brewer.pal(5, "Blues")[5], outlier.shape = NA, alpha = 0) +
labs(y = Y.label, x = NULL) +
theme_custom() + theme(axis.text.y = element_text(size = 15)) + coord_flip())
(plot1c <- db2 %>%
drop_na(Domain,Biodiversity_prop) %>%
ggplot(aes(x = Domain, y = Biodiversity_prop)) +
geom_flat_violin(position = position_nudge(x = 0.2, y = 0),
alpha = 1, fill= RColorBrewer::brewer.pal(5, "Blues")[5], col = "white", adjust = 1.5) +
geom_point(position = position_jitter(width = 0.15), size = 1, alpha = 0.7, color = RColorBrewer::brewer.pal(5, "Blues")[3]) +
geom_boxplot(width = 0.2, col = RColorBrewer::brewer.pal(5, "Blues")[5], outlier.shape = NA, alpha = 0) +
labs(y = Y.label, x = NULL) +
theme_custom() + theme(axis.text.y = element_text(size = 15)) + coord_flip())
levels(db2$Method)[c(6,7)] <- "Other"
(plot1d <- db2 %>%
drop_na(Method,Biodiversity_prop) %>%
ggplot(aes(x = Method, y = Biodiversity_prop)) +
geom_flat_violin(position = position_nudge(x = 0.2, y = 0),
alpha = 1, fill= RColorBrewer::brewer.pal(5, "Blues")[5], col = "white", adjust = 1.5) +
geom_point(position = position_jitter(width = 0.15), size = 1, alpha = 0.7, color = RColorBrewer::brewer.pal(5, "Blues")[3]) +
geom_boxplot(width = 0.2, col = RColorBrewer::brewer.pal(5, "Blues")[5], outlier.shape = NA, alpha = 0) +
labs(y = Y.label, x = NULL) +
theme_custom() + theme(axis.text.y = element_text(size = 15)) + coord_flip())
pdf(file = "Figure/Figure_2.pdf", width = 14, height = 10)
ggpubr::ggarrange(plot1a, plot1b, plot1c, plot1d,
common.legend = FALSE,
hjust = -5,
align = "hv",
labels = c("A", "B", "C", "D"),
ncol = 2, nrow = 2) #warnings() are due to NA removal
dev.off()
#clean
rm(plot1a, plot1b, plot1c, plot1d)
#Loading silhouettes
animal_png <- png::readPNG("Phylopics/Animal.png")
fungi_png  <- png::readPNG("Phylopics/Fungi.png")
micro_png  <- png::readPNG("Phylopics/Micro.png")
plant_png  <- png::readPNG("Phylopics/Plant.png")
# Plotting
plot2a <- ggplot(data = db[db$Animals_prop>0,], aes(x = Publication_year, y = Animals_prop)) +
geom_point(col = "grey10", fill = "grey30", size = 5, shape = 21, alpha = 0.3) +
geom_smooth(method = "glm", formula = y ~ x,
method.args = list(family = quasibinomial(link = "logit")),
col = "blue", fill = "blue") +
labs(title = "Only animals", x = NULL , y = Y.label)+
xlim(1992,2020)+
ylim(0,1)+
annotation_custom(grid::rasterGrob(animal_png), xmin = 1990, xmax = 1998, ymin = 0.75, ymax = 1)+
theme_custom()
plot2b <- ggplot(db[db$Plants_prop>0,], aes(x = Publication_year, y = Plants_prop)) +
geom_point(col = "grey10", fill = "grey30", size = 5, shape = 21, alpha = 0.3) +
geom_smooth(method = "glm", formula = y ~ x,
method.args = list(family = quasibinomial(link = "logit")),
col = "blue", fill = "blue") +
labs(title = "Only plants", x = NULL , y = NULL)+
xlim(1992,2020)+
ylim(0,1)+
annotation_custom(grid::rasterGrob(plant_png), xmin = 1992, xmax = 1995, ymin = 0.75, ymax = 1)+
theme_custom()
plot2c <- ggplot(data = db[db$Fungi_prop>0,], aes(x = Publication_year, y = Fungi_prop)) +
geom_point(col = "grey10", fill = "grey30", size = 5, shape = 21, alpha = 0.3) +
geom_smooth(method = "glm", formula = y ~ x,
method.args = list(family = quasibinomial(link = "logit")),
col = "blue", fill = "blue") +
labs(title = "Only fungi", x = "Publication year" , y = Y.label)+
xlim(1992,2020)+
ylim(0,1)+
annotation_custom(grid::rasterGrob(fungi_png), xmin = 1992, xmax = 1997, ymin = 0.75, ymax =1)+
theme_custom()
plot2d <- ggplot(data = db[db$Micro_prop>0,], aes(x = Publication_year, y = Micro_prop)) +
geom_point(col = "grey10", fill = "grey30", size = 5, shape = 21, alpha = 0.3) +
geom_smooth(method = "glm", formula = y ~ x,
method.args = list(family = quasibinomial(link = "logit")),
col = "blue", fill = "blue") +
labs(title = "Only microorganisms", x = "Publication year" , y = NULL)+
xlim(1992,2020)+
ylim(0,1)+
annotation_custom(grid::rasterGrob(micro_png), xmin = 1992, xmax = 1997, ymin = 0.75, ymax = 1)+
theme_custom()
pdf(file = "Figure/Figure_S1.pdf", width = 16, height =12)
ggpubr::ggarrange(plot2a,plot2b,plot2c,plot2d,
common.legend = FALSE,
hjust = -5,
align = "hv",
labels = c("A", "B", "C", "D"),
ncol=2, nrow=2) #warnings() are due to NA removal
dev.off()
rm(animal_png, fungi_png, micro_png, plant_png)
#clean
rm(plot2a,plot2b,plot2c,plot2d)
# Subset
db_glm <- db2 %>% select(year = Publication_year,
n_aut,
citation_residuals,
Method,
Phylogenetic_div,
Functional_div,
Other_div,
Title_geo,
Title_hab,
Title_taxon,
Title_adjecties,
Biodiversity_prop,
Geography,
Domain,
country_diversity)
# Checking balancing of factors
table(db_glm$Method) #Citizen science/simulation too few records
table(db_glm$Geography) #Antartica a bit unbalanced
table(db_glm$Domain) #OK
levels(db_glm$Domain)[c(3,4)] <- "Aquatic"
db_glm <- droplevels(db_glm)
# Dependent var
db_glm$prop  <- rowSums(db2[,36:91])
db_glm$total <- length(36:91)
db_outliers <- db2[db2$Biodiversity_prop > 0.3,]
quantile(db_outliers$Biodiversity_prop)
db_outliers$title
db_outliers$Biodiversity_prop
#db_glm <- db_glm[db_glm$citation_residuals < 200,]
db_glm <- db_glm[db_glm$prop < 20,]
# Scale continuous variables
db_glm <- db_glm %>% mutate_at(vars(year,citation_residuals,country_diversity),scale)
# Set formula
model_1 <- as.formula("prop ~
year +
Domain + Geography + Method +
Phylogenetic_div + Functional_div + Other_div +
Title_geo + Title_hab + Title_taxon")
#Initial model
m1  <- glm(model_1, data = db_glm, family = "poisson")
performance::check_overdispersion(m1) #overdispersed
#Refit with quasibinomial due to overdispersion
m1b  <- MASS::glm.nb(model_1, data = db_glm)
parameters::parameters(m1b, df_method="wald")
performance::check_collinearity(m1b)
performance::r2(m1b)
# PostHoc
pairs(emmeans::emmeans(m1b, ~ Domain), simple=c("Domain"))
pairs(emmeans::emmeans(m1b, ~ Geography), simple="Geography")
