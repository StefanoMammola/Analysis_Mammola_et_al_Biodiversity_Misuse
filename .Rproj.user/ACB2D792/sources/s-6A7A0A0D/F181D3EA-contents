################################

# Cardoso, P. et al. TITLE OF THE PAPER. Methods in Ecology and Evolution, submitted

## Code authors: Thomas Guillerme (guillert@tcd.ie), Stefano Mammola (stefano.mammola@cnr.it)

## Software: R (v. R 4.1.0) and R studio (v. 1.4.1103)

## ------------
## Preparatory steps
## ------------

## Set working directory

setwd("/Users/stefanomammola/Desktop/Cardoso et al. HYPERTREE")

## Loading R packages

library("GGally")
library("dads") #devtools::install_github("TGuillerme/dads")

## Loading new version of BAT (not yet in CRAN)

source("BAT290.R")

## Custom function for plot

# (Credit to Pascal GP Martin)
# https://pascal-martin.netlify.app/post/nicer-scatterplot-in-gggally/

GGscatterPlot <- function(data, mapping, ..., 
                          method = "spearman") {
  
  #Get correlation coefficient
  x <- GGally::eval_data_col(data, mapping$x)
  y <- GGally::eval_data_col(data, mapping$y)
  
  cor <- cor(x, y, method = method)
  #Assemble data frame
  df <- data.frame(x = x, y = y)
  # PCA
  nonNull <- x!=0 & y!=0
  dfpc <- prcomp(~x+y, df[nonNull,])
  df$cols <- predict(dfpc, df)[,1]
  # Define the direction of color range based on PC1 orientation:
  dfsum <- x+y
  colDirection <- ifelse(dfsum[which.max(df$cols)] < 
                           dfsum[which.min(df$cols)],
                         1,
                         -1)
  #Get 2D density for alpha
  dens2D <- MASS::kde2d(df$x, df$y)
  df$density <- fields::interp.surface(dens2D , 
                                       df[,c("x", "y")])
  
  if (any(df$density==0)) {
    mini2D = min(df$density[df$density!=0]) #smallest non zero value
    df$density[df$density==0] <- mini2D
  }
  #Prepare plot
  pp <- ggplot(df, aes(x=x, y=y, color = cols, alpha = 1/density)) +
    ggplot2::geom_point(shape=16, show.legend = FALSE) +
    ggplot2::scale_color_viridis_c(direction = colDirection) +
    #                scale_color_gradient(low = "#0091ff", high = "#f0650e") +
    ggplot2::scale_alpha(range = c(.05, .6)) +
    ggplot2::geom_abline(intercept = 0, slope = 1, col="darkred") +
    ggplot2::geom_label(
      data = data.frame(
        xlabel = min(x, na.rm = TRUE),
        ylabel = max(y, na.rm = TRUE),
        lab = round(cor, digits = 3)),
      mapping = ggplot2::aes(x = xlabel, 
                             y = ylabel, 
                             label = lab),
      hjust = 0, vjust = 1,
      size = 3, fontface = "bold",
      inherit.aes = FALSE # do not inherit anything from the ...
    ) +
    theme_minimal()
  
  return(pp)
}

## ------------
## Running multiple simulations
## ------------

n.sim   <- 100
n.sp    <- 50
n.trait <- 3

# Set simul parameters
bd_params <- make.bd.params(speciation = runif,
                            extinction = runif,
                            joint      = TRUE)

stop_rule <- list(max.living = n.sp)

#trait_process <- make.traits(process = BM.process, n = n.trait)
trait_processes <- list(BM = make.traits(process = BM.process, n = n.trait),
                        OU = make.traits(process = BM.process, n = n.trait))

## You can wrap all that into a replicate loop to generate a list of trees (here to generate 5 simulations)
all_data <- replicate(n.sim, dads(bd.params      = bd_params,
                                  stop.rule      = stop_rule,
                                  traits         = trait_processes[[sample(c(1,2), 1)]],
                                  null.error     = 100),
                      simplify = FALSE) 

## Save
saveRDS(all_data, file = "simul_traits.rds")

## Read
# readRDS(file = "simul_results.rds")

# ## You can wrap all that into a replicate loop to generate a list of trees (here to generate 5 simulations)
# all_data <- replicate(n.sim, dads(bd.params  = bd_params,
#                               stop.rule    = stop_rule,
#                               traits       = trait_process,
#                               null.error   = 100), 
#                       simplify = FALSE)

## Visualize one
plot(drop.fossil.dads(all_data[[1]]))

## Extracting all trees While dropping fossils

#all_trees  <- lapply(all_data, function(x) return(drop.fossil.dads(x)$tree))
all_traits <- lapply(all_data, function(x) return(drop.fossil.dads(x)$data))

## ------------
## Calculating stats in BAT
## ------------

for(i in 1:n.sim) {
  
  message(paste0("Simulation ", i , " out of ", n.sim))
  
  trait_i <- all_traits[[i]]
  n <- nrow(trait_i)
  
  message("------ Estimating nj trees ------")
  
  #Calculate stats with nj Trees
  tree_nj <- tree.build(trait_i, distance = "gower", func = "nj")
  
  r_tree_nj <- alpha(comm = rep(1, n), tree = tree_nj) #richness
  d_tree_nj <- dispersion(comm = rep(1, n), tree = tree_nj) #divergence
  e_tree_nj <- evenness(comm = rep(1, n), tree = tree_nj) #regularity
  
  message("------ Estimating UPGMA trees ------")
  
  #Calculate stats with nj Trees
  tree_upgma <- tree.build(trait_i, distance = "gower", func = "upgma")
  
  r_tree_upgma <- alpha(comm = rep(1, n), tree = tree_upgma) #richness
  d_tree_upgma <- dispersion(comm = rep(1, n), tree = tree_upgma) #divergence
  e_tree_upgma <- evenness(comm = rep(1, n), tree = tree_upgma) #regularity
  
  message("------ Estimating hypervolumes ------")
  
  #Calculate stats with hypervolumes
  hv <- kernel.build(comm = rep(1, n), trait = trait_i, method = "box")
  
  r_hv <- kernel.alpha(hv) #richness
  d_hv <- kernel.dispersion(hv) #divergence
  e_hv <- kernel.evenness(hv) #regularity
  
  #Store the results
  
  if(i > 1) {
    
    run             <- c(run, i)
    ric_tree_nj     <- c(ric_tree_nj, r_tree_nj)
    div_tree_nj     <- c(div_tree_nj, d_tree_nj)
    reg_tree_nj     <- c(reg_tree_nj, e_tree_nj)
    ric_tree_upgma  <- c(ric_tree_upgma, r_tree_upgma)
    div_tree_upgma  <- c(div_tree_upgma, d_tree_upgma) 
    reg_tree_upgma  <- c(reg_tree_upgma, e_tree_upgma) 
    ric_hv          <- c(ric_hv, r_hv)
    div_hv          <- c(div_hv, d_hv)
    reg_hv          <- c(reg_hv, e_hv)
    
  } else { 
    
    run             <- i
    ric_tree_nj     <- r_tree_nj 
    div_tree_nj     <- d_tree_nj 
    reg_tree_nj     <- e_tree_nj 
    ric_tree_upgma  <- r_tree_upgma
    div_tree_upgma  <- d_tree_upgma 
    reg_tree_upgma  <- e_tree_upgma 
    ric_hv          <- r_hv
    div_hv          <- d_hv
    reg_hv          <- e_hv
    
  }
}

## Store
results <- data.frame(run,      
                      ric_tree_nj,
                      div_tree_nj,
                      reg_tree_nj,
                      ric_tree_upgma,
                      div_tree_upgma, 
                      reg_tree_upgma,  
                      ric_hv,   
                      div_hv,  
                      reg_hv)

## Save
saveRDS(results, file = "simul_results.rds")

## ------------
## Checking results
## ------------

## Read
readRDS(file = "simul_results.rds")

# Checking correlation among the three metrics in njtrees

# Check correlations (as scatterplots), variable distribution, and print correlation coefficient 
(plot1 <- ggpairs(results, 
                  columns = 2:4,
                  title=NULL,
                  columnLabels = c("Richness", "Divergence", "Regularity"))+
    #lower = list(continuous = wrap(GGscatterPlot, method="pearson")),
    #upper = "blank") +
    theme_bw() +
    theme(
      panel.grid.major.x = element_blank(),
      panel.grid.minor.x = element_blank(),
      panel.grid.minor.y = element_blank(),
      panel.grid.major.y = element_blank(),
      plot.margin = unit(c(1, 1, 1, 1), units = , "cm"),
      strip.text=element_text(color = "grey10", face = "bold", size=10),
      strip.background = element_rect(colour=NA, fill="white")
    )
)

ggsave(plot = plot1, filename = "figure_NJ.pdf",width = 22, height = 14, units = "cm")

# Is there cor with hypervolumes?
strip_label_custom <- c("nj tree", "upgma tree", "hypervolume")

(plot2 <- ggpairs(results, 
                  columns = c(2,5,8),
                  columnLabels = strip_label_custom,
                  title = "Richness")+
    theme_bw() +
    theme(
      panel.grid.major.x = element_blank(),
      panel.grid.minor.x = element_blank(),
      panel.grid.minor.y = element_blank(),
      panel.grid.major.y = element_blank(),
      plot.margin = unit(c(1, 1, 1, 1), units = , "cm"),
      strip.text=element_text(color = "grey10", face = "bold", size=10),
      strip.background = element_rect(colour=NA, fill="white")
    )
)

(plot3 <- ggpairs(results, 
                  columns = c(3,6,9),
                  columnLabels = strip_label_custom,
                  title = "Divergence")+
    theme_bw() +
    theme(
      panel.grid.major.x = element_blank(),
      panel.grid.minor.x = element_blank(),
      panel.grid.minor.y = element_blank(),
      panel.grid.major.y = element_blank(),
      plot.margin = unit(c(1, 1, 1, 1), units = , "cm"),
      strip.text=element_text(color = "grey10", face = "bold", size=10),
      strip.background = element_rect(colour=NA, fill="white")
    )
)

(plot4 <- ggpairs(results, 
                  columns = c(4,7,10),
                  columnLabels = strip_label_custom,
                  title = "Regularity")+
    theme_bw() +
    theme(
      panel.grid.major.x = element_blank(),
      panel.grid.minor.x = element_blank(),
      panel.grid.minor.y = element_blank(),
      panel.grid.major.y = element_blank(),
      plot.margin = unit(c(1, 1, 1, 1), units = , "cm"),
      strip.text=element_text(color = "grey10", face = "bold", size=10),
      strip.background = element_rect(colour=NA, fill="white")
    )
)

ggsave(plot = plot2, filename = "Figure_Richness.pdf",width = 22, height = 14, units = "cm")
ggsave(plot = plot3, filename = "Figure_Divergence.pdf",width = 22, height = 14, units = "cm")
ggsave(plot = plot4, filename = "Figure_Regularity.pdf",width = 22, height = 14, units = "cm")


